/*
    bycatch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bycatch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bycatch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_bycatch_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bycatch");
    reader.add_event(292, 290, "end", "model_bycatch");
    return reader;
}

class model_bycatch
  : public stan::model::model_base_crtp<model_bycatch> {
private:
        int n_row;
        vector_d effort;
        vector_d new_effort;
        std::vector<int> yint;
        vector_d yreal;
        std::vector<int> time;
        int n_year;
        int K;
        matrix_d x;
        int family;
        int time_varying;
        int est_phi;
        int est_theta;
        int est_sigma;
        int est_cv;
        int is_discrete;
public:
    model_bycatch(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_bycatch(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_bycatch_namespace::model_bycatch";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n_row", "int", context__.to_vec());
            n_row = int(0);
            vals_i__ = context__.vals_i("n_row");
            pos__ = 0;
            n_row = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_row", n_row, 0);

            current_statement_begin__ = 3;
            validate_non_negative_index("effort", "n_row", n_row);
            context__.validate_dims("data initialization", "effort", "vector_d", context__.to_vec(n_row));
            effort = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_row);
            vals_r__ = context__.vals_r("effort");
            pos__ = 0;
            size_t effort_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < effort_j_1_max__; ++j_1__) {
                effort(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 4;
            validate_non_negative_index("new_effort", "n_row", n_row);
            context__.validate_dims("data initialization", "new_effort", "vector_d", context__.to_vec(n_row));
            new_effort = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_row);
            vals_r__ = context__.vals_r("new_effort");
            pos__ = 0;
            size_t new_effort_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < new_effort_j_1_max__; ++j_1__) {
                new_effort(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 5;
            validate_non_negative_index("yint", "n_row", n_row);
            context__.validate_dims("data initialization", "yint", "int", context__.to_vec(n_row));
            yint = std::vector<int>(n_row, int(0));
            vals_i__ = context__.vals_i("yint");
            pos__ = 0;
            size_t yint_k_0_max__ = n_row;
            for (size_t k_0__ = 0; k_0__ < yint_k_0_max__; ++k_0__) {
                yint[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 6;
            validate_non_negative_index("yreal", "n_row", n_row);
            context__.validate_dims("data initialization", "yreal", "vector_d", context__.to_vec(n_row));
            yreal = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_row);
            vals_r__ = context__.vals_r("yreal");
            pos__ = 0;
            size_t yreal_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < yreal_j_1_max__; ++j_1__) {
                yreal(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 7;
            validate_non_negative_index("time", "n_row", n_row);
            context__.validate_dims("data initialization", "time", "int", context__.to_vec(n_row));
            time = std::vector<int>(n_row, int(0));
            vals_i__ = context__.vals_i("time");
            pos__ = 0;
            size_t time_k_0_max__ = n_row;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "n_year", "int", context__.to_vec());
            n_year = int(0);
            vals_i__ = context__.vals_i("n_year");
            pos__ = 0;
            n_year = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_year", n_year, 0);

            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);

            current_statement_begin__ = 10;
            validate_non_negative_index("x", "n_row", n_row);
            validate_non_negative_index("x", "K", K);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n_row,K));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_row, K);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = K;
            size_t x_j_1_max__ = n_row;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "family", "int", context__.to_vec());
            family = int(0);
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            family = vals_i__[pos__++];

            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "time_varying", "int", context__.to_vec());
            time_varying = int(0);
            vals_i__ = context__.vals_i("time_varying");
            pos__ = 0;
            time_varying = vals_i__[pos__++];


            // initialize transformed data variables
            current_statement_begin__ = 15;
            est_phi = int(0);
            stan::math::fill(est_phi, std::numeric_limits<int>::min());

            current_statement_begin__ = 16;
            est_theta = int(0);
            stan::math::fill(est_theta, std::numeric_limits<int>::min());

            current_statement_begin__ = 17;
            est_sigma = int(0);
            stan::math::fill(est_sigma, std::numeric_limits<int>::min());

            current_statement_begin__ = 18;
            est_cv = int(0);
            stan::math::fill(est_cv, std::numeric_limits<int>::min());

            current_statement_begin__ = 19;
            is_discrete = int(0);
            stan::math::fill(is_discrete, std::numeric_limits<int>::min());

            // execute transformed data statements
            current_statement_begin__ = 21;
            stan::math::assign(est_phi, 0);
            current_statement_begin__ = 22;
            stan::math::assign(est_theta, 0);
            current_statement_begin__ = 23;
            stan::math::assign(est_sigma, 0);
            current_statement_begin__ = 24;
            stan::math::assign(est_cv, 0);
            current_statement_begin__ = 25;
            stan::math::assign(is_discrete, 0);
            current_statement_begin__ = 26;
            if (as_bool(logical_eq(family, 2))) {
                current_statement_begin__ = 26;
                stan::math::assign(est_phi, 1);
            }
            current_statement_begin__ = 27;
            if (as_bool(logical_eq(family, 3))) {
                current_statement_begin__ = 27;
                stan::math::assign(est_theta, 1);
            }
            current_statement_begin__ = 28;
            if (as_bool(logical_eq(family, 4))) {

                current_statement_begin__ = 29;
                stan::math::assign(est_phi, 1);
                current_statement_begin__ = 30;
                stan::math::assign(est_theta, 1);
            }
            current_statement_begin__ = 32;
            if (as_bool(logical_lt(family, 5))) {
                current_statement_begin__ = 32;
                stan::math::assign(is_discrete, 1);
            }
            current_statement_begin__ = 34;
            if (as_bool(logical_eq(family, 5))) {
                current_statement_begin__ = 34;
                stan::math::assign(est_sigma, 1);
            }
            current_statement_begin__ = 35;
            if (as_bool(logical_eq(family, 7))) {

                current_statement_begin__ = 36;
                stan::math::assign(est_sigma, 1);
                current_statement_begin__ = 37;
                stan::math::assign(est_theta, 1);
            }
            current_statement_begin__ = 40;
            if (as_bool(logical_eq(family, 6))) {
                current_statement_begin__ = 40;
                stan::math::assign(est_cv, 1);
            }
            current_statement_begin__ = 41;
            if (as_bool(logical_eq(family, 8))) {

                current_statement_begin__ = 42;
                stan::math::assign(est_cv, 1);
                current_statement_begin__ = 43;
                stan::math::assign(est_theta, 1);
            }
            current_statement_begin__ = 46;
            if (as_bool(logical_eq(family, 9))) {
                current_statement_begin__ = 46;
                stan::math::assign(est_sigma, 1);
            }
            current_statement_begin__ = 47;
            if (as_bool(logical_eq(family, 10))) {

                current_statement_begin__ = 48;
                stan::math::assign(est_sigma, 1);
                current_statement_begin__ = 49;
                stan::math::assign(est_theta, 1);
            }

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 53;
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 54;
            validate_non_negative_index("est_time_dev", "(time_varying * (n_year - 1))", (time_varying * (n_year - 1)));
            num_params_r__ += (time_varying * (n_year - 1));
            current_statement_begin__ = 55;
            validate_non_negative_index("sigma_rw", "time_varying", time_varying);
            num_params_r__ += (1 * time_varying);
            current_statement_begin__ = 56;
            validate_non_negative_index("sigma_logn", "est_sigma", est_sigma);
            num_params_r__ += (1 * est_sigma);
            current_statement_begin__ = 57;
            validate_non_negative_index("cv_gamma", "est_cv", est_cv);
            num_params_r__ += (1 * est_cv);
            current_statement_begin__ = 58;
            validate_non_negative_index("nb2_phi", "est_phi", est_phi);
            num_params_r__ += (1 * est_phi);
            current_statement_begin__ = 59;
            validate_non_negative_index("theta", "est_theta", est_theta);
            num_params_r__ += (1 * est_theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_bycatch() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 53;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 54;
        if (!(context__.contains_r("est_time_dev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable est_time_dev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("est_time_dev");
        pos__ = 0U;
        validate_non_negative_index("est_time_dev", "(time_varying * (n_year - 1))", (time_varying * (n_year - 1)));
        context__.validate_dims("parameter initialization", "est_time_dev", "vector_d", context__.to_vec((time_varying * (n_year - 1))));
        Eigen::Matrix<double, Eigen::Dynamic, 1> est_time_dev((time_varying * (n_year - 1)));
        size_t est_time_dev_j_1_max__ = (time_varying * (n_year - 1));
        for (size_t j_1__ = 0; j_1__ < est_time_dev_j_1_max__; ++j_1__) {
            est_time_dev(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(est_time_dev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable est_time_dev: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 55;
        if (!(context__.contains_r("sigma_rw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_rw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_rw");
        pos__ = 0U;
        validate_non_negative_index("sigma_rw", "time_varying", time_varying);
        context__.validate_dims("parameter initialization", "sigma_rw", "double", context__.to_vec(time_varying));
        std::vector<double> sigma_rw(time_varying, double(0));
        size_t sigma_rw_k_0_max__ = time_varying;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_k_0_max__; ++k_0__) {
            sigma_rw[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_rw_i_0_max__ = time_varying;
        for (size_t i_0__ = 0; i_0__ < sigma_rw_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_rw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_rw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 56;
        if (!(context__.contains_r("sigma_logn")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_logn missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_logn");
        pos__ = 0U;
        validate_non_negative_index("sigma_logn", "est_sigma", est_sigma);
        context__.validate_dims("parameter initialization", "sigma_logn", "double", context__.to_vec(est_sigma));
        std::vector<double> sigma_logn(est_sigma, double(0));
        size_t sigma_logn_k_0_max__ = est_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_logn_k_0_max__; ++k_0__) {
            sigma_logn[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_logn_i_0_max__ = est_sigma;
        for (size_t i_0__ = 0; i_0__ < sigma_logn_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_logn[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_logn: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 57;
        if (!(context__.contains_r("cv_gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cv_gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cv_gamma");
        pos__ = 0U;
        validate_non_negative_index("cv_gamma", "est_cv", est_cv);
        context__.validate_dims("parameter initialization", "cv_gamma", "double", context__.to_vec(est_cv));
        std::vector<double> cv_gamma(est_cv, double(0));
        size_t cv_gamma_k_0_max__ = est_cv;
        for (size_t k_0__ = 0; k_0__ < cv_gamma_k_0_max__; ++k_0__) {
            cv_gamma[k_0__] = vals_r__[pos__++];
        }
        size_t cv_gamma_i_0_max__ = est_cv;
        for (size_t i_0__ = 0; i_0__ < cv_gamma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, cv_gamma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cv_gamma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 58;
        if (!(context__.contains_r("nb2_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nb2_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nb2_phi");
        pos__ = 0U;
        validate_non_negative_index("nb2_phi", "est_phi", est_phi);
        context__.validate_dims("parameter initialization", "nb2_phi", "double", context__.to_vec(est_phi));
        std::vector<double> nb2_phi(est_phi, double(0));
        size_t nb2_phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < nb2_phi_k_0_max__; ++k_0__) {
            nb2_phi[k_0__] = vals_r__[pos__++];
        }
        size_t nb2_phi_i_0_max__ = est_phi;
        for (size_t i_0__ = 0; i_0__ < nb2_phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, nb2_phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nb2_phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 59;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "est_theta", est_theta);
        context__.validate_dims("parameter initialization", "theta", "double", context__.to_vec(est_theta));
        std::vector<double> theta(est_theta, double(0));
        size_t theta_k_0_max__ = est_theta;
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            theta[k_0__] = vals_r__[pos__++];
        }
        size_t theta_i_0_max__ = est_theta;
        for (size_t i_0__ = 0; i_0__ < theta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, theta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(K, lp__);
            else
                beta = in__.vector_constrain(K);

            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> est_time_dev;
            (void) est_time_dev;  // dummy to suppress unused var warning
            if (jacobian__)
                est_time_dev = in__.vector_constrain((time_varying * (n_year - 1)), lp__);
            else
                est_time_dev = in__.vector_constrain((time_varying * (n_year - 1)));

            current_statement_begin__ = 55;
            std::vector<local_scalar_t__> sigma_rw;
            size_t sigma_rw_d_0_max__ = time_varying;
            sigma_rw.reserve(sigma_rw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_rw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_rw.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_rw.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 56;
            std::vector<local_scalar_t__> sigma_logn;
            size_t sigma_logn_d_0_max__ = est_sigma;
            sigma_logn.reserve(sigma_logn_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_logn_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_logn.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_logn.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 57;
            std::vector<local_scalar_t__> cv_gamma;
            size_t cv_gamma_d_0_max__ = est_cv;
            cv_gamma.reserve(cv_gamma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < cv_gamma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    cv_gamma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    cv_gamma.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 58;
            std::vector<local_scalar_t__> nb2_phi;
            size_t nb2_phi_d_0_max__ = est_phi;
            nb2_phi.reserve(nb2_phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < nb2_phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    nb2_phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    nb2_phi.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 59;
            std::vector<local_scalar_t__> theta;
            size_t theta_d_0_max__ = est_theta;
            theta.reserve(theta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    theta.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    theta.push_back(in__.scalar_lub_constrain(0, 1));
            }

            // transformed parameters
            current_statement_begin__ = 62;
            validate_non_negative_index("log_lambda", "n_row", n_row);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lambda(n_row);
            stan::math::initialize(log_lambda, DUMMY_VAR__);
            stan::math::fill(log_lambda, DUMMY_VAR__);

            current_statement_begin__ = 63;
            validate_non_negative_index("lambda", "n_row", n_row);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda(n_row);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);

            current_statement_begin__ = 64;
            validate_non_negative_index("pred", "n_row", n_row);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pred(n_row);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);

            current_statement_begin__ = 65;
            validate_non_negative_index("gammaA", "est_cv", est_cv);
            std::vector<local_scalar_t__> gammaA(est_cv, local_scalar_t__(0));
            stan::math::initialize(gammaA, DUMMY_VAR__);
            stan::math::fill(gammaA, DUMMY_VAR__);

            current_statement_begin__ = 66;
            validate_non_negative_index("time_dev", "(time_varying * n_year)", (time_varying * n_year));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> time_dev((time_varying * n_year));
            stan::math::initialize(time_dev, DUMMY_VAR__);
            stan::math::fill(time_dev, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 67;
            stan::math::assign(pred, multiply(x, beta));
            current_statement_begin__ = 69;
            if (as_bool(logical_eq(time_varying, 1))) {

                current_statement_begin__ = 70;
                stan::model::assign(time_dev, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable time_dev");
                current_statement_begin__ = 71;
                for (int i = 2; i <= n_year; ++i) {

                    current_statement_begin__ = 72;
                    stan::model::assign(time_dev, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(est_time_dev, (i - 1), "est_time_dev", 1), 
                                "assigning variable time_dev");
                }
            }
            current_statement_begin__ = 76;
            for (int i = 1; i <= n_row; ++i) {

                current_statement_begin__ = 77;
                if (as_bool(logical_eq(time_varying, 1))) {

                    current_statement_begin__ = 78;
                    stan::model::assign(pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(pred, i, "pred", 1) + (time_varying * get_base1(time_dev, get_base1(time, i, "time", 1), "time_dev", 1))), 
                                "assigning variable pred");
                }
                current_statement_begin__ = 80;
                stan::model::assign(log_lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(pred, i, "pred", 1) + stan::math::log(get_base1(effort, i, "effort", 1))), 
                            "assigning variable log_lambda");
                current_statement_begin__ = 81;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(log_lambda, i, "log_lambda", 1)), 
                            "assigning variable lambda");
            }
            current_statement_begin__ = 84;
            if (as_bool(logical_eq(est_cv, 1))) {
                current_statement_begin__ = 84;
                stan::model::assign(gammaA, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            inv(pow(get_base1(cv_gamma, 1, "cv_gamma", 1), 2.0)), 
                            "assigning variable gammaA");
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 62;
            size_t log_lambda_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_lambda(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_lambda" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_lambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 63;
            size_t lambda_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 64;
            size_t pred_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 65;
            size_t gammaA_k_0_max__ = est_cv;
            for (size_t k_0__ = 0; k_0__ < gammaA_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(gammaA[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gammaA" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gammaA: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t gammaA_i_0_max__ = est_cv;
            for (size_t i_0__ = 0; i_0__ < gammaA_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "gammaA[i_0__]", gammaA[i_0__], 0);
            }

            current_statement_begin__ = 66;
            size_t time_dev_j_1_max__ = (time_varying * n_year);
            for (size_t j_1__ = 0; j_1__ < time_dev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(time_dev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: time_dev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable time_dev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 87;
            lp_accum__.add(student_t_log<propto__>(beta, 3, 0, 2));
            current_statement_begin__ = 89;
            if (as_bool(logical_eq(time_varying, 1))) {

                current_statement_begin__ = 90;
                lp_accum__.add(student_t_log<propto__>(sigma_rw, 3, 0, 1));
                current_statement_begin__ = 91;
                lp_accum__.add(student_t_log<propto__>(get_base1(est_time_dev, 1, "est_time_dev", 1), 3, 0, 2));
                current_statement_begin__ = 92;
                for (int i = 2; i <= (n_year - 1); ++i) {

                    current_statement_begin__ = 94;
                    lp_accum__.add(normal_log<propto__>(get_base1(est_time_dev, i, "est_time_dev", 1), get_base1(est_time_dev, (i - 1), "est_time_dev", 1), get_base1(sigma_rw, 1, "sigma_rw", 1)));
                }
            }
            current_statement_begin__ = 98;
            if (as_bool(logical_eq(est_theta, 1))) {

                current_statement_begin__ = 99;
                lp_accum__.add(beta_log<propto__>(theta, 1, 1));
            }
            current_statement_begin__ = 102;
            if (as_bool(logical_eq(family, 1))) {

                current_statement_begin__ = 103;
                lp_accum__.add(poisson_log_log<propto__>(yint, log_lambda));
            } else if (as_bool(logical_eq(family, 2))) {

                current_statement_begin__ = 106;
                lp_accum__.add(student_t_log<propto__>(nb2_phi, 3, 0, 2));
                current_statement_begin__ = 107;
                lp_accum__.add(neg_binomial_2_log_log<propto__>(yint, log_lambda, get_base1(nb2_phi, 1, "nb2_phi", 1)));
            } else if (as_bool(logical_eq(family, 3))) {

                current_statement_begin__ = 110;
                for (int i = 1; i <= n_row; ++i) {

                    current_statement_begin__ = 113;
                    if (as_bool(logical_eq(get_base1(yint, i, "yint", 1), 0))) {
                        current_statement_begin__ = 114;
                        lp_accum__.add(bernoulli_log<propto__>(1, theta));
                    } else {

                        current_statement_begin__ = 116;
                        lp_accum__.add(bernoulli_log<propto__>(0, theta));
                        current_statement_begin__ = 117;
                        lp_accum__.add(poisson_log<propto__>(get_base1(yint, i, "yint", 1), get_base1(lambda, i, "lambda", 1)));
                        if (get_base1(yint, i, "yint", 1) < 1) lp_accum__.add(-std::numeric_limits<double>::infinity());
                        else lp_accum__.add(-log_sum_exp(poisson_ccdf_log(1, get_base1(lambda, i, "lambda", 1)), poisson_log(1, get_base1(lambda, i, "lambda", 1))));
                    }
                }
            } else if (as_bool(logical_eq(family, 4))) {

                current_statement_begin__ = 122;
                for (int i = 1; i <= n_row; ++i) {

                    current_statement_begin__ = 123;
                    if (as_bool(logical_eq(get_base1(yint, i, "yint", 1), 0))) {
                        current_statement_begin__ = 124;
                        lp_accum__.add(bernoulli_log<propto__>(1, theta));
                    } else {

                        current_statement_begin__ = 126;
                        lp_accum__.add(bernoulli_log<propto__>(0, theta));
                        current_statement_begin__ = 127;
                        lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(yint, i, "yint", 1), get_base1(lambda, i, "lambda", 1), get_base1(nb2_phi, 1, "nb2_phi", 1)));
                        if (get_base1(yint, i, "yint", 1) < 1) lp_accum__.add(-std::numeric_limits<double>::infinity());
                        else lp_accum__.add(-log_sum_exp(neg_binomial_2_ccdf_log(1, get_base1(lambda, i, "lambda", 1), get_base1(nb2_phi, 1, "nb2_phi", 1)), neg_binomial_2_log(1, get_base1(lambda, i, "lambda", 1), get_base1(nb2_phi, 1, "nb2_phi", 1))));
                    }
                }
            } else if (as_bool(logical_eq(family, 5))) {

                current_statement_begin__ = 132;
                lp_accum__.add(student_t_log<propto__>(sigma_logn, 3, 0, 2));
                current_statement_begin__ = 133;
                lp_accum__.add(lognormal_log<propto__>(yreal, log_lambda, get_base1(sigma_logn, 1, "sigma_logn", 1)));
            } else if (as_bool(logical_eq(family, 6))) {

                current_statement_begin__ = 136;
                lp_accum__.add(student_t_log<propto__>(get_base1(cv_gamma, 1, "cv_gamma", 1), 3, 0, 2));
                current_statement_begin__ = 137;
                lp_accum__.add(gamma_log<propto__>(yreal, get_base1(gammaA, 1, "gammaA", 1), elt_divide(get_base1(gammaA, 1, "gammaA", 1), lambda)));
            } else if (as_bool(logical_eq(family, 7))) {

                current_statement_begin__ = 140;
                lp_accum__.add(student_t_log<propto__>(sigma_logn, 3, 0, 2));
                current_statement_begin__ = 141;
                for (int i = 1; i <= n_row; ++i) {

                    current_statement_begin__ = 142;
                    if (as_bool(logical_eq(get_base1(yint, i, "yint", 1), 0))) {
                        current_statement_begin__ = 143;
                        lp_accum__.add(bernoulli_log<propto__>(1, theta));
                    } else {

                        current_statement_begin__ = 145;
                        lp_accum__.add(bernoulli_log<propto__>(0, theta));
                        current_statement_begin__ = 146;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(yreal, i, "yreal", 1), get_base1(log_lambda, i, "log_lambda", 1), get_base1(sigma_logn, 1, "sigma_logn", 1)));
                    }
                }
            } else if (as_bool(logical_eq(family, 8))) {

                current_statement_begin__ = 151;
                lp_accum__.add(student_t_log<propto__>(get_base1(cv_gamma, 1, "cv_gamma", 1), 3, 0, 2));
                current_statement_begin__ = 152;
                for (int i = 1; i <= n_row; ++i) {

                    current_statement_begin__ = 153;
                    if (as_bool(logical_eq(get_base1(yint, i, "yint", 1), 0))) {
                        current_statement_begin__ = 154;
                        lp_accum__.add(bernoulli_log<propto__>(1, theta));
                    } else {

                        current_statement_begin__ = 156;
                        lp_accum__.add(bernoulli_log<propto__>(0, theta));
                        current_statement_begin__ = 157;
                        lp_accum__.add(gamma_log<propto__>(get_base1(yreal, i, "yreal", 1), get_base1(gammaA, 1, "gammaA", 1), (get_base1(gammaA, 1, "gammaA", 1) / get_base1(lambda, i, "lambda", 1))));
                    }
                }
            } else if (as_bool(logical_eq(family, 9))) {

                current_statement_begin__ = 162;
                lp_accum__.add(student_t_log<propto__>(sigma_logn, 3, 0, 2));
                current_statement_begin__ = 163;
                lp_accum__.add(normal_log<propto__>(yreal, lambda, get_base1(sigma_logn, 1, "sigma_logn", 1)));
            } else if (as_bool(logical_eq(family, 10))) {

                current_statement_begin__ = 166;
                lp_accum__.add(student_t_log<propto__>(sigma_logn, 3, 0, 2));
                current_statement_begin__ = 167;
                for (int i = 1; i <= n_row; ++i) {

                    current_statement_begin__ = 168;
                    if (as_bool(logical_eq(get_base1(yint, i, "yint", 1), 0))) {
                        current_statement_begin__ = 169;
                        lp_accum__.add(bernoulli_log<propto__>(1, theta));
                    } else {

                        current_statement_begin__ = 171;
                        lp_accum__.add(bernoulli_log<propto__>(0, theta));
                        current_statement_begin__ = 172;
                        lp_accum__.add(normal_log<propto__>(get_base1(yreal, i, "yreal", 1), get_base1(lambda, i, "lambda", 1), get_base1(sigma_logn, 1, "sigma_logn", 1)));
                    }
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("est_time_dev");
        names__.push_back("sigma_rw");
        names__.push_back("sigma_logn");
        names__.push_back("cv_gamma");
        names__.push_back("nb2_phi");
        names__.push_back("theta");
        names__.push_back("log_lambda");
        names__.push_back("lambda");
        names__.push_back("pred");
        names__.push_back("gammaA");
        names__.push_back("time_dev");
        names__.push_back("log_lik");
        names__.push_back("y_new");
        names__.push_back("y_new_real");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((time_varying * (n_year - 1)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(time_varying);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_sigma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_cv);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_phi);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_theta);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_row);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_row);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_row);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_cv);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((time_varying * n_year));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_row);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_row * is_discrete));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_row * (1 - is_discrete)));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bycatch_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> est_time_dev = in__.vector_constrain((time_varying * (n_year - 1)));
        size_t est_time_dev_j_1_max__ = (time_varying * (n_year - 1));
        for (size_t j_1__ = 0; j_1__ < est_time_dev_j_1_max__; ++j_1__) {
            vars__.push_back(est_time_dev(j_1__));
        }

        std::vector<double> sigma_rw;
        size_t sigma_rw_d_0_max__ = time_varying;
        sigma_rw.reserve(sigma_rw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_rw_d_0_max__; ++d_0__) {
            sigma_rw.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_rw_k_0_max__ = time_varying;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_rw[k_0__]);
        }

        std::vector<double> sigma_logn;
        size_t sigma_logn_d_0_max__ = est_sigma;
        sigma_logn.reserve(sigma_logn_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_logn_d_0_max__; ++d_0__) {
            sigma_logn.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_logn_k_0_max__ = est_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_logn_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_logn[k_0__]);
        }

        std::vector<double> cv_gamma;
        size_t cv_gamma_d_0_max__ = est_cv;
        cv_gamma.reserve(cv_gamma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < cv_gamma_d_0_max__; ++d_0__) {
            cv_gamma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t cv_gamma_k_0_max__ = est_cv;
        for (size_t k_0__ = 0; k_0__ < cv_gamma_k_0_max__; ++k_0__) {
            vars__.push_back(cv_gamma[k_0__]);
        }

        std::vector<double> nb2_phi;
        size_t nb2_phi_d_0_max__ = est_phi;
        nb2_phi.reserve(nb2_phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < nb2_phi_d_0_max__; ++d_0__) {
            nb2_phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t nb2_phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < nb2_phi_k_0_max__; ++k_0__) {
            vars__.push_back(nb2_phi[k_0__]);
        }

        std::vector<double> theta;
        size_t theta_d_0_max__ = est_theta;
        theta.reserve(theta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_d_0_max__; ++d_0__) {
            theta.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t theta_k_0_max__ = est_theta;
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            vars__.push_back(theta[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 62;
            validate_non_negative_index("log_lambda", "n_row", n_row);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lambda(n_row);
            stan::math::initialize(log_lambda, DUMMY_VAR__);
            stan::math::fill(log_lambda, DUMMY_VAR__);

            current_statement_begin__ = 63;
            validate_non_negative_index("lambda", "n_row", n_row);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda(n_row);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);

            current_statement_begin__ = 64;
            validate_non_negative_index("pred", "n_row", n_row);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pred(n_row);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);

            current_statement_begin__ = 65;
            validate_non_negative_index("gammaA", "est_cv", est_cv);
            std::vector<double> gammaA(est_cv, double(0));
            stan::math::initialize(gammaA, DUMMY_VAR__);
            stan::math::fill(gammaA, DUMMY_VAR__);

            current_statement_begin__ = 66;
            validate_non_negative_index("time_dev", "(time_varying * n_year)", (time_varying * n_year));
            Eigen::Matrix<double, Eigen::Dynamic, 1> time_dev((time_varying * n_year));
            stan::math::initialize(time_dev, DUMMY_VAR__);
            stan::math::fill(time_dev, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 67;
            stan::math::assign(pred, multiply(x, beta));
            current_statement_begin__ = 69;
            if (as_bool(logical_eq(time_varying, 1))) {

                current_statement_begin__ = 70;
                stan::model::assign(time_dev, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable time_dev");
                current_statement_begin__ = 71;
                for (int i = 2; i <= n_year; ++i) {

                    current_statement_begin__ = 72;
                    stan::model::assign(time_dev, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(est_time_dev, (i - 1), "est_time_dev", 1), 
                                "assigning variable time_dev");
                }
            }
            current_statement_begin__ = 76;
            for (int i = 1; i <= n_row; ++i) {

                current_statement_begin__ = 77;
                if (as_bool(logical_eq(time_varying, 1))) {

                    current_statement_begin__ = 78;
                    stan::model::assign(pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(pred, i, "pred", 1) + (time_varying * get_base1(time_dev, get_base1(time, i, "time", 1), "time_dev", 1))), 
                                "assigning variable pred");
                }
                current_statement_begin__ = 80;
                stan::model::assign(log_lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(pred, i, "pred", 1) + stan::math::log(get_base1(effort, i, "effort", 1))), 
                            "assigning variable log_lambda");
                current_statement_begin__ = 81;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(log_lambda, i, "log_lambda", 1)), 
                            "assigning variable lambda");
            }
            current_statement_begin__ = 84;
            if (as_bool(logical_eq(est_cv, 1))) {
                current_statement_begin__ = 84;
                stan::model::assign(gammaA, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            inv(pow(get_base1(cv_gamma, 1, "cv_gamma", 1), 2.0)), 
                            "assigning variable gammaA");
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 65;
            size_t gammaA_i_0_max__ = est_cv;
            for (size_t i_0__ = 0; i_0__ < gammaA_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "gammaA[i_0__]", gammaA[i_0__], 0);
            }

            // write transformed parameters
            if (include_tparams__) {
                size_t log_lambda_j_1_max__ = n_row;
                for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lambda(j_1__));
                }
                size_t lambda_j_1_max__ = n_row;
                for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda(j_1__));
                }
                size_t pred_j_1_max__ = n_row;
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    vars__.push_back(pred(j_1__));
                }
                size_t gammaA_k_0_max__ = est_cv;
                for (size_t k_0__ = 0; k_0__ < gammaA_k_0_max__; ++k_0__) {
                    vars__.push_back(gammaA[k_0__]);
                }
                size_t time_dev_j_1_max__ = (time_varying * n_year);
                for (size_t j_1__ = 0; j_1__ < time_dev_j_1_max__; ++j_1__) {
                    vars__.push_back(time_dev(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 179;
            validate_non_negative_index("log_lik", "n_row", n_row);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_row);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 180;
            validate_non_negative_index("y_new", "(n_row * is_discrete)", (n_row * is_discrete));
            std::vector<int> y_new((n_row * is_discrete), int(0));
            stan::math::fill(y_new, std::numeric_limits<int>::min());

            current_statement_begin__ = 181;
            validate_non_negative_index("y_new_real", "(n_row * (1 - is_discrete))", (n_row * (1 - is_discrete)));
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_new_real((n_row * (1 - is_discrete)));
            stan::math::initialize(y_new_real, DUMMY_VAR__);
            stan::math::fill(y_new_real, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 183;
            if (as_bool(logical_eq(family, 1))) {

                current_statement_begin__ = 184;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 185;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                poisson_log_log(get_base1(yint, n, "yint", 1), get_base1(log_lambda, n, "log_lambda", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 188;
                    stan::model::assign(y_new, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                poisson_log_rng((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))), base_rng__), 
                                "assigning variable y_new");
                }
            } else if (as_bool(logical_eq(family, 2))) {

                current_statement_begin__ = 192;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 193;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                neg_binomial_2_log_log(get_base1(yint, n, "yint", 1), get_base1(log_lambda, n, "log_lambda", 1), get_base1(nb2_phi, 1, "nb2_phi", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 196;
                    stan::model::assign(y_new, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                neg_binomial_2_log_rng((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))), get_base1(nb2_phi, 1, "nb2_phi", 1), base_rng__), 
                                "assigning variable y_new");
                }
            } else if (as_bool(logical_eq(family, 3))) {

                current_statement_begin__ = 200;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 201;
                    if (as_bool(logical_eq(get_base1(yint, n, "yint", 1), 0))) {

                        current_statement_begin__ = 203;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    stan::math::log(get_base1(theta, 1, "theta", 1)), 
                                    "assigning variable log_lik");
                    } else {

                        current_statement_begin__ = 206;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    ((log1m(get_base1(theta, 1, "theta", 1)) + poisson_log_log(get_base1(yint, n, "yint", 1), get_base1(log_lambda, n, "log_lambda", 1))) - poisson_ccdf_log(0, get_base1(lambda, n, "lambda", 1))), 
                                    "assigning variable log_lik");
                    }
                    current_statement_begin__ = 210;
                    stan::model::assign(y_new, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((1 - bernoulli_rng(get_base1(theta, 1, "theta", 1), base_rng__)) * poisson_log_rng((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))), base_rng__)), 
                                "assigning variable y_new");
                }
            } else if (as_bool(logical_eq(family, 4))) {

                current_statement_begin__ = 214;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 215;
                    if (as_bool(logical_eq(get_base1(yint, n, "yint", 1), 0))) {

                        current_statement_begin__ = 217;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    stan::math::log(get_base1(theta, 1, "theta", 1)), 
                                    "assigning variable log_lik");
                    } else {

                        current_statement_begin__ = 220;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    ((log1m(get_base1(theta, 1, "theta", 1)) + neg_binomial_2_log_log(get_base1(yint, n, "yint", 1), get_base1(log_lambda, n, "log_lambda", 1), get_base1(nb2_phi, 1, "nb2_phi", 1))) - neg_binomial_2_ccdf_log(0, get_base1(lambda, n, "lambda", 1), get_base1(nb2_phi, 1, "nb2_phi", 1))), 
                                    "assigning variable log_lik");
                    }
                    current_statement_begin__ = 224;
                    stan::model::assign(y_new, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((1 - bernoulli_rng(get_base1(theta, 1, "theta", 1), base_rng__)) * neg_binomial_2_log_rng((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))), get_base1(nb2_phi, 1, "nb2_phi", 1), base_rng__)), 
                                "assigning variable y_new");
                }
            } else if (as_bool(logical_eq(family, 5))) {

                current_statement_begin__ = 228;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 229;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                lognormal_log(get_base1(yreal, n, "yreal", 1), get_base1(log_lambda, n, "log_lambda", 1), get_base1(sigma_logn, 1, "sigma_logn", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 232;
                    stan::model::assign(y_new_real, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                lognormal_rng((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))), get_base1(sigma_logn, 1, "sigma_logn", 1), base_rng__), 
                                "assigning variable y_new_real");
                }
            } else if (as_bool(logical_eq(family, 6))) {

                current_statement_begin__ = 236;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 237;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                gamma_log(get_base1(yreal, n, "yreal", 1), get_base1(gammaA, 1, "gammaA", 1), (get_base1(gammaA, 1, "gammaA", 1) / get_base1(lambda, n, "lambda", 1))), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 240;
                    stan::model::assign(y_new_real, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                gamma_rng(get_base1(gammaA, 1, "gammaA", 1), (get_base1(gammaA, 1, "gammaA", 1) / stan::math::exp((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))))), base_rng__), 
                                "assigning variable y_new_real");
                }
            } else if (as_bool(logical_eq(family, 7))) {

                current_statement_begin__ = 244;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 245;
                    if (as_bool(logical_eq(get_base1(yint, n, "yint", 1), 0))) {

                        current_statement_begin__ = 247;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    stan::math::log(get_base1(theta, 1, "theta", 1)), 
                                    "assigning variable log_lik");
                    } else {

                        current_statement_begin__ = 249;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    lognormal_log(get_base1(yreal, n, "yreal", 1), get_base1(log_lambda, n, "log_lambda", 1), get_base1(sigma_logn, 1, "sigma_logn", 1)), 
                                    "assigning variable log_lik");
                    }
                    current_statement_begin__ = 253;
                    stan::model::assign(y_new_real, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((1 - bernoulli_rng(get_base1(theta, 1, "theta", 1), base_rng__)) * lognormal_rng((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))), get_base1(sigma_logn, 1, "sigma_logn", 1), base_rng__)), 
                                "assigning variable y_new_real");
                }
            } else if (as_bool(logical_eq(family, 8))) {

                current_statement_begin__ = 257;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 258;
                    if (as_bool(logical_eq(get_base1(yint, n, "yint", 1), 0))) {

                        current_statement_begin__ = 260;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    stan::math::log(get_base1(theta, 1, "theta", 1)), 
                                    "assigning variable log_lik");
                    } else {

                        current_statement_begin__ = 262;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    gamma_log(get_base1(yreal, n, "yreal", 1), get_base1(gammaA, 1, "gammaA", 1), (get_base1(gammaA, 1, "gammaA", 1) / get_base1(lambda, n, "lambda", 1))), 
                                    "assigning variable log_lik");
                    }
                    current_statement_begin__ = 266;
                    stan::model::assign(y_new_real, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((1 - bernoulli_rng(get_base1(theta, 1, "theta", 1), base_rng__)) * gamma_rng(get_base1(gammaA, 1, "gammaA", 1), (get_base1(gammaA, 1, "gammaA", 1) / stan::math::exp((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1))))), base_rng__)), 
                                "assigning variable y_new_real");
                }
            } else if (as_bool(logical_eq(family, 9))) {

                current_statement_begin__ = 270;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 271;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_log(get_base1(yreal, n, "yreal", 1), get_base1(lambda, n, "lambda", 1), get_base1(sigma_logn, 1, "sigma_logn", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 274;
                    stan::model::assign(y_new_real, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_rng(stan::math::exp((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1)))), get_base1(sigma_logn, 1, "sigma_logn", 1), base_rng__), 
                                "assigning variable y_new_real");
                }
            } else if (as_bool(logical_eq(family, 10))) {

                current_statement_begin__ = 278;
                for (int n = 1; n <= n_row; ++n) {

                    current_statement_begin__ = 279;
                    if (as_bool(logical_eq(get_base1(yint, n, "yint", 1), 0))) {

                        current_statement_begin__ = 281;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    stan::math::log(get_base1(theta, 1, "theta", 1)), 
                                    "assigning variable log_lik");
                    } else {

                        current_statement_begin__ = 283;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    normal_log(get_base1(yreal, n, "yreal", 1), get_base1(lambda, n, "lambda", 1), get_base1(sigma_logn, 1, "sigma_logn", 1)), 
                                    "assigning variable log_lik");
                    }
                    current_statement_begin__ = 287;
                    stan::model::assign(y_new_real, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((1 - bernoulli_rng(get_base1(theta, 1, "theta", 1), base_rng__)) * normal_rng(stan::math::exp((get_base1(pred, n, "pred", 1) + stan::math::log(get_base1(new_effort, n, "new_effort", 1)))), get_base1(sigma_logn, 1, "sigma_logn", 1), base_rng__)), 
                                "assigning variable y_new_real");
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 179;
            size_t log_lik_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }

            current_statement_begin__ = 180;
            size_t y_new_i_0_max__ = (n_row * is_discrete);
            for (size_t i_0__ = 0; i_0__ < y_new_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_new[i_0__]", y_new[i_0__], 0);
            }

            size_t y_new_k_0_max__ = (n_row * is_discrete);
            for (size_t k_0__ = 0; k_0__ < y_new_k_0_max__; ++k_0__) {
                vars__.push_back(y_new[k_0__]);
            }

            current_statement_begin__ = 181;
            size_t y_new_real_j_1_max__ = (n_row * (1 - is_discrete));
            for (size_t j_1__ = 0; j_1__ < y_new_real_j_1_max__; ++j_1__) {
                vars__.push_back(y_new_real(j_1__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_bycatch";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t est_time_dev_j_1_max__ = (time_varying * (n_year - 1));
        for (size_t j_1__ = 0; j_1__ < est_time_dev_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "est_time_dev" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_rw_k_0_max__ = time_varying;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_logn_k_0_max__ = est_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_logn_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_logn" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cv_gamma_k_0_max__ = est_cv;
        for (size_t k_0__ = 0; k_0__ < cv_gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cv_gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nb2_phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < nb2_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nb2_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_k_0_max__ = est_theta;
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t log_lambda_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t pred_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gammaA_k_0_max__ = est_cv;
            for (size_t k_0__ = 0; k_0__ < gammaA_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gammaA" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t time_dev_j_1_max__ = (time_varying * n_year);
            for (size_t j_1__ = 0; j_1__ < time_dev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "time_dev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_row;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_new_k_0_max__ = (n_row * is_discrete);
        for (size_t k_0__ = 0; k_0__ < y_new_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_new" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_new_real_j_1_max__ = (n_row * (1 - is_discrete));
        for (size_t j_1__ = 0; j_1__ < y_new_real_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_new_real" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t est_time_dev_j_1_max__ = (time_varying * (n_year - 1));
        for (size_t j_1__ = 0; j_1__ < est_time_dev_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "est_time_dev" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_rw_k_0_max__ = time_varying;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_logn_k_0_max__ = est_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_logn_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_logn" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cv_gamma_k_0_max__ = est_cv;
        for (size_t k_0__ = 0; k_0__ < cv_gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cv_gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nb2_phi_k_0_max__ = est_phi;
        for (size_t k_0__ = 0; k_0__ < nb2_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nb2_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_k_0_max__ = est_theta;
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t log_lambda_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t pred_j_1_max__ = n_row;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gammaA_k_0_max__ = est_cv;
            for (size_t k_0__ = 0; k_0__ < gammaA_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gammaA" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t time_dev_j_1_max__ = (time_varying * n_year);
            for (size_t j_1__ = 0; j_1__ < time_dev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "time_dev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_row;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_new_k_0_max__ = (n_row * is_discrete);
        for (size_t k_0__ = 0; k_0__ < y_new_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_new" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_new_real_j_1_max__ = (n_row * (1 - is_discrete));
        for (size_t j_1__ = 0; j_1__ < y_new_real_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_new_real" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef model_bycatch_namespace::model_bycatch stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
