// Generated by rstantools.  Do not edit by hand.

/*
    bycatch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bycatch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bycatch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_bycatch_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 284> locations_array__ =
  {" (found before start of program)",
  " (in 'bycatch', line 53, column 2 to column 17)",
  " (in 'bycatch', line 54, column 2 to column 47)",
  " (in 'bycatch', line 55, column 2 to column 39)",
  " (in 'bycatch', line 56, column 2 to column 38)",
  " (in 'bycatch', line 57, column 2 to column 33)",
  " (in 'bycatch', line 58, column 2 to column 33)",
  " (in 'bycatch', line 59, column 2 to column 41)",
  " (in 'bycatch', line 62, column 2 to column 27)",
  " (in 'bycatch', line 63, column 2 to column 23)",
  " (in 'bycatch', line 64, column 2 to column 21)",
  " (in 'bycatch', line 65, column 2 to column 31)",
  " (in 'bycatch', line 66, column 2 to column 39)",
  " (in 'bycatch', line 173, column 2 to column 24)",
  " (in 'bycatch', line 174, column 2 to column 42)",
  " (in 'bycatch', line 175, column 2 to column 43)",
  " (in 'bycatch', line 67, column 2 to column 18)",
  " (in 'bycatch', line 69, column 4 to column 20)",
  " (in 'bycatch', line 71, column 6 to column 38)",
  " (in 'bycatch', line 70, column 23 to line 72, column 5)",
  " (in 'bycatch', line 70, column 4 to line 72, column 5)",
  " (in 'bycatch', line 68, column 24 to line 73, column 3)",
  " (in 'bycatch', line 68, column 2 to line 73, column 3)",
  " (in 'bycatch', line 76, column 6 to column 57)",
  " (in 'bycatch', line 75, column 26 to line 77, column 5)",
  " (in 'bycatch', line 75, column 4 to line 77, column 5)",
  " (in 'bycatch', line 78, column 4 to column 45)",
  " (in 'bycatch', line 79, column 4 to column 35)",
  " (in 'bycatch', line 74, column 20 to line 80, column 3)",
  " (in 'bycatch', line 74, column 2 to line 80, column 3)",
  " (in 'bycatch', line 82, column 16 to column 55)",
  " (in 'bycatch', line 82, column 2 to column 55)",
  " (in 'bycatch', line 276, column 8 to column 70)",
  " (in 'bycatch', line 275, column 13 to line 277, column 7)",
  " (in 'bycatch', line 274, column 8 to column 35)",
  " (in 'bycatch', line 272, column 21 to line 275, column 7)",
  " (in 'bycatch', line 272, column 6 to line 277, column 7)",
  " (in 'bycatch', line 279, column 6 to column 24)",
  " (in 'bycatch', line 280, column 28 to column 137)",
  " (in 'bycatch', line 280, column 6 to column 137)",
  " (in 'bycatch', line 271, column 22 to line 281, column 5)",
  " (in 'bycatch', line 271, column 4 to line 281, column 5)",
  " (in 'bycatch', line 270, column 22 to line 282, column 3)",
  " (in 'bycatch', line 270, column 7 to line 282, column 3)",
  " (in 'bycatch', line 264, column 6 to column 68)",
  " (in 'bycatch', line 266, column 6 to column 24)",
  " (in 'bycatch', line 267, column 28 to column 105)",
  " (in 'bycatch', line 267, column 6 to column 105)",
  " (in 'bycatch', line 263, column 22 to line 268, column 5)",
  " (in 'bycatch', line 263, column 4 to line 268, column 5)",
  " (in 'bycatch', line 262, column 21 to line 269, column 3)",
  " (in 'bycatch', line 262, column 7 to line 282, column 3)",
  " (in 'bycatch', line 255, column 8 to column 77)",
  " (in 'bycatch', line 254, column 13 to line 256, column 7)",
  " (in 'bycatch', line 253, column 8 to column 35)",
  " (in 'bycatch', line 251, column 21 to line 254, column 7)",
  " (in 'bycatch', line 251, column 6 to line 256, column 7)",
  " (in 'bycatch', line 258, column 6 to column 24)",
  " (in 'bycatch', line 259, column 28 to column 144)",
  " (in 'bycatch', line 259, column 6 to column 144)",
  " (in 'bycatch', line 259, column 144 to column 145)",
  " (in 'bycatch', line 250, column 22 to line 260, column 5)",
  " (in 'bycatch', line 250, column 4 to line 260, column 5)",
  " (in 'bycatch', line 249, column 21 to line 261, column 3)",
  " (in 'bycatch', line 249, column 7 to line 282, column 3)",
  " (in 'bycatch', line 242, column 8 to column 77)",
  " (in 'bycatch', line 241, column 13 to line 243, column 7)",
  " (in 'bycatch', line 240, column 8 to column 35)",
  " (in 'bycatch', line 238, column 21 to line 241, column 7)",
  " (in 'bycatch', line 238, column 6 to line 243, column 7)",
  " (in 'bycatch', line 245, column 6 to column 24)",
  " (in 'bycatch', line 246, column 28 to column 135)",
  " (in 'bycatch', line 246, column 6 to column 135)",
  " (in 'bycatch', line 237, column 22 to line 247, column 5)",
  " (in 'bycatch', line 237, column 4 to line 247, column 5)",
  " (in 'bycatch', line 236, column 21 to line 248, column 3)",
  " (in 'bycatch', line 236, column 7 to line 282, column 3)",
  " (in 'bycatch', line 230, column 6 to column 75)",
  " (in 'bycatch', line 232, column 6 to column 24)",
  " (in 'bycatch', line 233, column 28 to column 112)",
  " (in 'bycatch', line 233, column 6 to column 112)",
  " (in 'bycatch', line 229, column 22 to line 234, column 5)",
  " (in 'bycatch', line 229, column 4 to line 234, column 5)",
  " (in 'bycatch', line 228, column 21 to line 235, column 3)",
  " (in 'bycatch', line 228, column 7 to line 282, column 3)",
  " (in 'bycatch', line 222, column 6 to column 75)",
  " (in 'bycatch', line 224, column 6 to column 24)",
  " (in 'bycatch', line 225, column 28 to column 103)",
  " (in 'bycatch', line 225, column 6 to column 103)",
  " (in 'bycatch', line 221, column 22 to line 226, column 5)",
  " (in 'bycatch', line 221, column 4 to line 226, column 5)",
  " (in 'bycatch', line 220, column 21 to line 227, column 3)",
  " (in 'bycatch', line 220, column 7 to line 282, column 3)",
  " (in 'bycatch', line 213, column 8 to column 150)",
  " (in 'bycatch', line 211, column 13 to line 214, column 7)",
  " (in 'bycatch', line 210, column 8 to column 35)",
  " (in 'bycatch', line 208, column 21 to line 211, column 7)",
  " (in 'bycatch', line 208, column 6 to line 214, column 7)",
  " (in 'bycatch', line 216, column 6 to column 19)",
  " (in 'bycatch', line 217, column 28 to column 136)",
  " (in 'bycatch', line 217, column 6 to column 136)",
  " (in 'bycatch', line 207, column 22 to line 218, column 5)",
  " (in 'bycatch', line 207, column 4 to line 218, column 5)",
  " (in 'bycatch', line 206, column 21 to line 219, column 3)",
  " (in 'bycatch', line 206, column 7 to line 282, column 3)",
  " (in 'bycatch', line 199, column 8 to column 112)",
  " (in 'bycatch', line 197, column 13 to line 200, column 7)",
  " (in 'bycatch', line 196, column 8 to column 35)",
  " (in 'bycatch', line 194, column 21 to line 197, column 7)",
  " (in 'bycatch', line 194, column 6 to line 200, column 7)",
  " (in 'bycatch', line 202, column 6 to column 19)",
  " (in 'bycatch', line 203, column 28 to column 117)",
  " (in 'bycatch', line 203, column 6 to column 117)",
  " (in 'bycatch', line 193, column 22 to line 204, column 5)",
  " (in 'bycatch', line 193, column 4 to line 204, column 5)",
  " (in 'bycatch', line 192, column 21 to line 205, column 3)",
  " (in 'bycatch', line 192, column 7 to line 282, column 3)",
  " (in 'bycatch', line 186, column 6 to column 80)",
  " (in 'bycatch', line 188, column 6 to column 19)",
  " (in 'bycatch', line 189, column 28 to column 104)",
  " (in 'bycatch', line 189, column 6 to column 104)",
  " (in 'bycatch', line 185, column 22 to line 190, column 5)",
  " (in 'bycatch', line 185, column 4 to line 190, column 5)",
  " (in 'bycatch', line 184, column 21 to line 191, column 3)",
  " (in 'bycatch', line 184, column 7 to line 282, column 3)",
  " (in 'bycatch', line 178, column 6 to column 61)",
  " (in 'bycatch', line 180, column 6 to column 19)",
  " (in 'bycatch', line 181, column 28 to column 85)",
  " (in 'bycatch', line 181, column 6 to column 85)",
  " (in 'bycatch', line 177, column 22 to line 182, column 5)",
  " (in 'bycatch', line 177, column 4 to line 182, column 5)",
  " (in 'bycatch', line 176, column 16 to line 183, column 3)",
  " (in 'bycatch', line 176, column 2 to line 282, column 3)",
  " (in 'bycatch', line 85, column 2 to column 28)",
  " (in 'bycatch', line 87, column 4 to column 34)",
  " (in 'bycatch', line 88, column 4 to column 41)",
  " (in 'bycatch', line 91, column 6 to column 63)",
  " (in 'bycatch', line 89, column 27 to line 92, column 5)",
  " (in 'bycatch', line 89, column 4 to line 92, column 5)",
  " (in 'bycatch', line 86, column 24 to line 93, column 3)",
  " (in 'bycatch', line 86, column 2 to line 93, column 3)",
  " (in 'bycatch', line 95, column 4 to column 22)",
  " (in 'bycatch', line 94, column 21 to line 96, column 3)",
  " (in 'bycatch', line 94, column 2 to line 96, column 3)",
  " (in 'bycatch', line 161, column 4 to column 36)",
  " (in 'bycatch', line 166, column 8 to column 29)",
  " (in 'bycatch', line 167, column 8 to column 52)",
  " (in 'bycatch', line 165, column 11 to line 168, column 7)",
  " (in 'bycatch', line 164, column 8 to column 29)",
  " (in 'bycatch', line 163, column 6 to line 168, column 7)",
  " (in 'bycatch', line 162, column 22 to line 169, column 5)",
  " (in 'bycatch', line 162, column 4 to line 169, column 5)",
  " (in 'bycatch', line 160, column 24 to line 170, column 3)",
  " (in 'bycatch', line 160, column 7 to line 170, column 3)",
  " (in 'bycatch', line 157, column 4 to column 36)",
  " (in 'bycatch', line 158, column 4 to column 42)",
  " (in 'bycatch', line 156, column 23 to line 159, column 3)",
  " (in 'bycatch', line 156, column 7 to line 170, column 3)",
  " (in 'bycatch', line 146, column 4 to column 37)",
  " (in 'bycatch', line 151, column 8 to column 29)",
  " (in 'bycatch', line 152, column 8 to column 59)",
  " (in 'bycatch', line 150, column 11 to line 153, column 7)",
  " (in 'bycatch', line 149, column 8 to column 29)",
  " (in 'bycatch', line 148, column 6 to line 153, column 7)",
  " (in 'bycatch', line 147, column 22 to line 154, column 5)",
  " (in 'bycatch', line 147, column 4 to line 154, column 5)",
  " (in 'bycatch', line 145, column 23 to line 155, column 3)",
  " (in 'bycatch', line 145, column 7 to line 170, column 3)",
  " (in 'bycatch', line 135, column 4 to column 36)",
  " (in 'bycatch', line 140, column 8 to column 29)",
  " (in 'bycatch', line 141, column 8 to column 59)",
  " (in 'bycatch', line 139, column 11 to line 142, column 7)",
  " (in 'bycatch', line 138, column 8 to column 29)",
  " (in 'bycatch', line 137, column 6 to line 142, column 7)",
  " (in 'bycatch', line 136, column 22 to line 143, column 5)",
  " (in 'bycatch', line 136, column 4 to line 143, column 5)",
  " (in 'bycatch', line 134, column 23 to line 144, column 3)",
  " (in 'bycatch', line 134, column 7 to line 170, column 3)",
  " (in 'bycatch', line 131, column 4 to column 37)",
  " (in 'bycatch', line 132, column 4 to column 50)",
  " (in 'bycatch', line 130, column 23 to line 133, column 3)",
  " (in 'bycatch', line 130, column 7 to line 170, column 3)",
  " (in 'bycatch', line 127, column 4 to column 36)",
  " (in 'bycatch', line 128, column 4 to column 49)",
  " (in 'bycatch', line 126, column 23 to line 129, column 3)",
  " (in 'bycatch', line 126, column 7 to line 170, column 3)",
  " (in 'bycatch', line 121, column 8 to column 29)",
  " (in 'bycatch', line 122, column 8 to column 63)",
  " (in 'bycatch', line 122, column 58 to column 59)",
  " (in 'bycatch', line 120, column 11 to line 123, column 7)",
  " (in 'bycatch', line 119, column 8 to column 29)",
  " (in 'bycatch', line 118, column 6 to line 123, column 7)",
  " (in 'bycatch', line 117, column 22 to line 124, column 5)",
  " (in 'bycatch', line 117, column 4 to line 124, column 5)",
  " (in 'bycatch', line 116, column 23 to line 125, column 3)",
  " (in 'bycatch', line 116, column 7 to line 170, column 3)",
  " (in 'bycatch', line 111, column 8 to column 29)",
  " (in 'bycatch', line 112, column 8 to column 44)",
  " (in 'bycatch', line 112, column 39 to column 40)",
  " (in 'bycatch', line 110, column 11 to line 113, column 7)",
  " (in 'bycatch', line 109, column 8 to column 29)",
  " (in 'bycatch', line 108, column 6 to line 113, column 7)",
  " (in 'bycatch', line 105, column 22 to line 114, column 5)",
  " (in 'bycatch', line 105, column 4 to line 114, column 5)",
  " (in 'bycatch', line 104, column 23 to line 115, column 3)",
  " (in 'bycatch', line 104, column 7 to line 170, column 3)",
  " (in 'bycatch', line 101, column 4 to column 33)",
  " (in 'bycatch', line 102, column 4 to column 54)",
  " (in 'bycatch', line 100, column 23 to line 103, column 3)",
  " (in 'bycatch', line 100, column 7 to line 170, column 3)",
  " (in 'bycatch', line 98, column 4 to column 35)",
  " (in 'bycatch', line 97, column 18 to line 99, column 3)",
  " (in 'bycatch', line 97, column 2 to line 170, column 3)",
  " (in 'bycatch', line 2, column 2 to column 21)",
  " (in 'bycatch', line 3, column 9 to column 14)",
  " (in 'bycatch', line 3, column 2 to column 23)",
  " (in 'bycatch', line 4, column 9 to column 14)",
  " (in 'bycatch', line 4, column 2 to column 27)",
  " (in 'bycatch', line 5, column 11 to column 16)",
  " (in 'bycatch', line 5, column 2 to column 18)",
  " (in 'bycatch', line 6, column 9 to column 14)",
  " (in 'bycatch', line 6, column 2 to column 22)",
  " (in 'bycatch', line 7, column 11 to column 16)",
  " (in 'bycatch', line 7, column 2 to column 18)",
  " (in 'bycatch', line 8, column 2 to column 22)",
  " (in 'bycatch', line 9, column 2 to column 17)",
  " (in 'bycatch', line 10, column 9 to column 14)",
  " (in 'bycatch', line 10, column 16 to column 17)",
  " (in 'bycatch', line 10, column 2 to column 21)",
  " (in 'bycatch', line 11, column 2 to column 13)",
  " (in 'bycatch', line 12, column 2 to column 19)",
  " (in 'bycatch', line 15, column 2 to column 14)",
  " (in 'bycatch', line 16, column 2 to column 16)",
  " (in 'bycatch', line 17, column 2 to column 16)",
  " (in 'bycatch', line 18, column 2 to column 13)",
  " (in 'bycatch', line 19, column 2 to column 18)",
  " (in 'bycatch', line 21, column 2 to column 14)",
  " (in 'bycatch', line 22, column 2 to column 16)",
  " (in 'bycatch', line 23, column 2 to column 16)",
  " (in 'bycatch', line 24, column 2 to column 13)",
  " (in 'bycatch', line 25, column 2 to column 16)",
  " (in 'bycatch', line 26, column 18 to column 28)",
  " (in 'bycatch', line 26, column 2 to column 28)",
  " (in 'bycatch', line 27, column 18 to column 30)",
  " (in 'bycatch', line 27, column 2 to column 30)",
  " (in 'bycatch', line 29, column 4 to column 14)",
  " (in 'bycatch', line 30, column 4 to column 16)",
  " (in 'bycatch', line 28, column 18 to line 31, column 3)",
  " (in 'bycatch', line 28, column 2 to line 31, column 3)",
  " (in 'bycatch', line 32, column 17 to column 33)",
  " (in 'bycatch', line 32, column 2 to column 33)",
  " (in 'bycatch', line 34, column 18 to column 32)",
  " (in 'bycatch', line 34, column 2 to column 32)",
  " (in 'bycatch', line 36, column 4 to column 18)",
  " (in 'bycatch', line 37, column 4 to column 16)",
  " (in 'bycatch', line 35, column 18 to line 38, column 3)",
  " (in 'bycatch', line 35, column 2 to line 38, column 3)",
  " (in 'bycatch', line 40, column 18 to column 29)",
  " (in 'bycatch', line 40, column 2 to column 29)",
  " (in 'bycatch', line 42, column 4 to column 15)",
  " (in 'bycatch', line 43, column 4 to column 16)",
  " (in 'bycatch', line 41, column 18 to line 44, column 3)",
  " (in 'bycatch', line 41, column 2 to line 44, column 3)",
  " (in 'bycatch', line 46, column 18 to column 32)",
  " (in 'bycatch', line 46, column 2 to column 32)",
  " (in 'bycatch', line 48, column 4 to column 18)",
  " (in 'bycatch', line 49, column 4 to column 17)",
  " (in 'bycatch', line 47, column 19 to line 50, column 3)",
  " (in 'bycatch', line 47, column 2 to line 50, column 3)",
  " (in 'bycatch', line 53, column 9 to column 10)",
  " (in 'bycatch', line 54, column 9 to column 32)",
  " (in 'bycatch', line 55, column 25 to column 37)",
  " (in 'bycatch', line 56, column 27 to column 36)",
  " (in 'bycatch', line 57, column 25 to column 31)",
  " (in 'bycatch', line 58, column 24 to column 31)",
  " (in 'bycatch', line 59, column 30 to column 39)",
  " (in 'bycatch', line 62, column 9 to column 14)",
  " (in 'bycatch', line 63, column 9 to column 14)",
  " (in 'bycatch', line 64, column 9 to column 14)",
  " (in 'bycatch', line 65, column 23 to column 29)",
  " (in 'bycatch', line 66, column 9 to column 28)",
  " (in 'bycatch', line 173, column 9 to column 14)",
  " (in 'bycatch', line 174, column 23 to column 40)",
  " (in 'bycatch', line 175, column 9 to column 30)"};
#include <stan_meta_header.hpp>
class model_bycatch final : public model_base_crtp<model_bycatch> {
private:
  int n_row;
  Eigen::Matrix<double,-1,1> effort_data__;
  Eigen::Matrix<double,-1,1> new_effort_data__;
  std::vector<int> yint;
  Eigen::Matrix<double,-1,1> yreal_data__;
  std::vector<int> time;
  int n_year;
  int K;
  Eigen::Matrix<double,-1,-1> x_data__;
  int family;
  int time_varying;
  int est_phi;
  int est_theta;
  int est_sigma;
  int est_cv;
  int is_discrete;
  int est_time_dev_1dim__;
  int time_dev_1dim__;
  int y_new_1dim__;
  int y_new_real_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> effort{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> new_effort{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> yreal{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x{nullptr, 0, 0};
public:
  ~model_bycatch() {}
  model_bycatch(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_bycatch_namespace::model_bycatch";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 213;
      context__.validate_dims("data initialization", "n_row", "int",
        std::vector<size_t>{});
      n_row = std::numeric_limits<int>::min();
      current_statement__ = 213;
      n_row = context__.vals_i("n_row")[(1 - 1)];
      current_statement__ = 213;
      stan::math::check_greater_or_equal(function__, "n_row", n_row, 0);
      current_statement__ = 214;
      stan::math::validate_non_negative_index("effort", "n_row", n_row);
      current_statement__ = 215;
      context__.validate_dims("data initialization", "effort", "double",
        std::vector<size_t>{static_cast<size_t>(n_row)});
      effort_data__ = Eigen::Matrix<double,-1,1>::Constant(n_row,
                        std::numeric_limits<double>::quiet_NaN());
      new (&effort)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(effort_data__.data(), n_row);
      {
        std::vector<local_scalar_t__> effort_flat__;
        current_statement__ = 215;
        effort_flat__ = context__.vals_r("effort");
        current_statement__ = 215;
        pos__ = 1;
        current_statement__ = 215;
        for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
          current_statement__ = 215;
          stan::model::assign(effort, effort_flat__[(pos__ - 1)],
            "assigning variable effort", stan::model::index_uni(sym1__));
          current_statement__ = 215;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 216;
      stan::math::validate_non_negative_index("new_effort", "n_row", n_row);
      current_statement__ = 217;
      context__.validate_dims("data initialization", "new_effort", "double",
        std::vector<size_t>{static_cast<size_t>(n_row)});
      new_effort_data__ = Eigen::Matrix<double,-1,1>::Constant(n_row,
                            std::numeric_limits<double>::quiet_NaN());
      new (&new_effort)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(new_effort_data__.data(),
        n_row);
      {
        std::vector<local_scalar_t__> new_effort_flat__;
        current_statement__ = 217;
        new_effort_flat__ = context__.vals_r("new_effort");
        current_statement__ = 217;
        pos__ = 1;
        current_statement__ = 217;
        for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
          current_statement__ = 217;
          stan::model::assign(new_effort, new_effort_flat__[(pos__ - 1)],
            "assigning variable new_effort", stan::model::index_uni(sym1__));
          current_statement__ = 217;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 218;
      stan::math::validate_non_negative_index("yint", "n_row", n_row);
      current_statement__ = 219;
      context__.validate_dims("data initialization", "yint", "int",
        std::vector<size_t>{static_cast<size_t>(n_row)});
      yint = std::vector<int>(n_row, std::numeric_limits<int>::min());
      current_statement__ = 219;
      yint = context__.vals_i("yint");
      current_statement__ = 220;
      stan::math::validate_non_negative_index("yreal", "n_row", n_row);
      current_statement__ = 221;
      context__.validate_dims("data initialization", "yreal", "double",
        std::vector<size_t>{static_cast<size_t>(n_row)});
      yreal_data__ = Eigen::Matrix<double,-1,1>::Constant(n_row,
                       std::numeric_limits<double>::quiet_NaN());
      new (&yreal)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(yreal_data__.data(), n_row);
      {
        std::vector<local_scalar_t__> yreal_flat__;
        current_statement__ = 221;
        yreal_flat__ = context__.vals_r("yreal");
        current_statement__ = 221;
        pos__ = 1;
        current_statement__ = 221;
        for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
          current_statement__ = 221;
          stan::model::assign(yreal, yreal_flat__[(pos__ - 1)],
            "assigning variable yreal", stan::model::index_uni(sym1__));
          current_statement__ = 221;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 222;
      stan::math::validate_non_negative_index("time", "n_row", n_row);
      current_statement__ = 223;
      context__.validate_dims("data initialization", "time", "int",
        std::vector<size_t>{static_cast<size_t>(n_row)});
      time = std::vector<int>(n_row, std::numeric_limits<int>::min());
      current_statement__ = 223;
      time = context__.vals_i("time");
      current_statement__ = 224;
      context__.validate_dims("data initialization", "n_year", "int",
        std::vector<size_t>{});
      n_year = std::numeric_limits<int>::min();
      current_statement__ = 224;
      n_year = context__.vals_i("n_year")[(1 - 1)];
      current_statement__ = 224;
      stan::math::check_greater_or_equal(function__, "n_year", n_year, 0);
      current_statement__ = 225;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 225;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 225;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 226;
      stan::math::validate_non_negative_index("x", "n_row", n_row);
      current_statement__ = 227;
      stan::math::validate_non_negative_index("x", "K", K);
      current_statement__ = 228;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n_row),
          static_cast<size_t>(K)});
      x_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_row, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_data__.data(),
        n_row, K);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 228;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 228;
        pos__ = 1;
        current_statement__ = 228;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 228;
          for (int sym2__ = 1; sym2__ <= n_row; ++sym2__) {
            current_statement__ = 228;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 228;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 229;
      context__.validate_dims("data initialization", "family", "int",
        std::vector<size_t>{});
      family = std::numeric_limits<int>::min();
      current_statement__ = 229;
      family = context__.vals_i("family")[(1 - 1)];
      current_statement__ = 230;
      context__.validate_dims("data initialization", "time_varying", "int",
        std::vector<size_t>{});
      time_varying = std::numeric_limits<int>::min();
      current_statement__ = 230;
      time_varying = context__.vals_i("time_varying")[(1 - 1)];
      current_statement__ = 231;
      est_phi = std::numeric_limits<int>::min();
      current_statement__ = 232;
      est_theta = std::numeric_limits<int>::min();
      current_statement__ = 233;
      est_sigma = std::numeric_limits<int>::min();
      current_statement__ = 234;
      est_cv = std::numeric_limits<int>::min();
      current_statement__ = 235;
      is_discrete = std::numeric_limits<int>::min();
      current_statement__ = 236;
      est_phi = 0;
      current_statement__ = 237;
      est_theta = 0;
      current_statement__ = 238;
      est_sigma = 0;
      current_statement__ = 239;
      est_cv = 0;
      current_statement__ = 240;
      is_discrete = 0;
      current_statement__ = 242;
      if (stan::math::logical_eq(family, 2)) {
        current_statement__ = 241;
        est_phi = 1;
      }
      current_statement__ = 244;
      if (stan::math::logical_eq(family, 3)) {
        current_statement__ = 243;
        est_theta = 1;
      }
      current_statement__ = 248;
      if (stan::math::logical_eq(family, 4)) {
        current_statement__ = 245;
        est_phi = 1;
        current_statement__ = 246;
        est_theta = 1;
      }
      current_statement__ = 250;
      if (stan::math::logical_lt(family, 5)) {
        current_statement__ = 249;
        is_discrete = 1;
      }
      current_statement__ = 252;
      if (stan::math::logical_eq(family, 5)) {
        current_statement__ = 251;
        est_sigma = 1;
      }
      current_statement__ = 256;
      if (stan::math::logical_eq(family, 7)) {
        current_statement__ = 253;
        est_sigma = 1;
        current_statement__ = 254;
        est_theta = 1;
      }
      current_statement__ = 258;
      if (stan::math::logical_eq(family, 6)) {
        current_statement__ = 257;
        est_cv = 1;
      }
      current_statement__ = 262;
      if (stan::math::logical_eq(family, 8)) {
        current_statement__ = 259;
        est_cv = 1;
        current_statement__ = 260;
        est_theta = 1;
      }
      current_statement__ = 264;
      if (stan::math::logical_eq(family, 9)) {
        current_statement__ = 263;
        est_sigma = 1;
      }
      current_statement__ = 268;
      if (stan::math::logical_eq(family, 10)) {
        current_statement__ = 265;
        est_sigma = 1;
        current_statement__ = 266;
        est_theta = 1;
      }
      current_statement__ = 269;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 270;
      est_time_dev_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 270;
      est_time_dev_1dim__ = (time_varying * (n_year - 1));
      current_statement__ = 270;
      stan::math::validate_non_negative_index("est_time_dev",
        "time_varying * (n_year - 1)", est_time_dev_1dim__);
      current_statement__ = 271;
      stan::math::validate_non_negative_index("sigma_rw", "time_varying",
        time_varying);
      current_statement__ = 272;
      stan::math::validate_non_negative_index("sigma_logn", "est_sigma",
        est_sigma);
      current_statement__ = 273;
      stan::math::validate_non_negative_index("cv_gamma", "est_cv", est_cv);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("nb2_phi", "est_phi", est_phi);
      current_statement__ = 275;
      stan::math::validate_non_negative_index("theta", "est_theta", est_theta);
      current_statement__ = 276;
      stan::math::validate_non_negative_index("log_lambda", "n_row", n_row);
      current_statement__ = 277;
      stan::math::validate_non_negative_index("lambda", "n_row", n_row);
      current_statement__ = 278;
      stan::math::validate_non_negative_index("pred", "n_row", n_row);
      current_statement__ = 279;
      stan::math::validate_non_negative_index("gammaA", "est_cv", est_cv);
      current_statement__ = 280;
      time_dev_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 280;
      time_dev_1dim__ = (time_varying * n_year);
      current_statement__ = 280;
      stan::math::validate_non_negative_index("time_dev",
        "time_varying * n_year", time_dev_1dim__);
      current_statement__ = 281;
      stan::math::validate_non_negative_index("log_lik", "n_row", n_row);
      current_statement__ = 282;
      y_new_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 282;
      y_new_1dim__ = (n_row * is_discrete);
      current_statement__ = 282;
      stan::math::validate_non_negative_index("y_new", "n_row * is_discrete",
        y_new_1dim__);
      current_statement__ = 283;
      y_new_real_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 283;
      y_new_real_1dim__ = (n_row * (1 - is_discrete));
      current_statement__ = 283;
      stan::math::validate_non_negative_index("y_new_real",
        "n_row * (1 - is_discrete)", y_new_real_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + est_time_dev_1dim__ + time_varying + est_sigma +
      est_cv + est_phi + est_theta;
  }
  inline std::string model_name() const final {
    return "model_bycatch";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_bycatch_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> est_time_dev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_time_dev_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      est_time_dev = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(est_time_dev_1dim__);
      std::vector<local_scalar_t__> sigma_rw =
        std::vector<local_scalar_t__>(time_varying, DUMMY_VAR__);
      current_statement__ = 3;
      sigma_rw = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   time_varying);
      std::vector<local_scalar_t__> sigma_logn =
        std::vector<local_scalar_t__>(est_sigma, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_logn = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     est_sigma);
      std::vector<local_scalar_t__> cv_gamma =
        std::vector<local_scalar_t__>(est_cv, DUMMY_VAR__);
      current_statement__ = 5;
      cv_gamma = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   est_cv);
      std::vector<local_scalar_t__> nb2_phi =
        std::vector<local_scalar_t__>(est_phi, DUMMY_VAR__);
      current_statement__ = 6;
      nb2_phi = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  est_phi);
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(est_theta, DUMMY_VAR__);
      current_statement__ = 7;
      theta = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, est_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> log_lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_row, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_row, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> pred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_row, DUMMY_VAR__);
      std::vector<local_scalar_t__> gammaA =
        std::vector<local_scalar_t__>(est_cv, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> time_dev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(time_dev_1dim__,
          DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(pred, stan::math::multiply(x, beta),
        "assigning variable pred");
      current_statement__ = 22;
      if (stan::math::logical_eq(time_varying, 1)) {
        current_statement__ = 17;
        stan::model::assign(time_dev, 0, "assigning variable time_dev",
          stan::model::index_uni(1));
        current_statement__ = 20;
        for (int i = 2; i <= n_year; ++i) {
          current_statement__ = 18;
          stan::model::assign(time_dev,
            stan::model::rvalue(est_time_dev, "est_time_dev",
              stan::model::index_uni((i - 1))),
            "assigning variable time_dev", stan::model::index_uni(i));
        }
      }
      current_statement__ = 29;
      for (int i = 1; i <= n_row; ++i) {
        current_statement__ = 25;
        if (stan::math::logical_eq(time_varying, 1)) {
          current_statement__ = 23;
          stan::model::assign(pred,
            (stan::model::rvalue(pred, "pred", stan::model::index_uni(i)) +
            (time_varying *
            stan::model::rvalue(time_dev, "time_dev",
              stan::model::index_uni(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)))))),
            "assigning variable pred", stan::model::index_uni(i));
        }
        current_statement__ = 26;
        stan::model::assign(log_lambda,
          (stan::model::rvalue(pred, "pred", stan::model::index_uni(i)) +
          stan::math::log(
            stan::model::rvalue(effort, "effort", stan::model::index_uni(i)))),
          "assigning variable log_lambda", stan::model::index_uni(i));
        current_statement__ = 27;
        stan::model::assign(lambda,
          stan::math::exp(
            stan::model::rvalue(log_lambda, "log_lambda",
              stan::model::index_uni(i))), "assigning variable lambda",
          stan::model::index_uni(i));
      }
      current_statement__ = 31;
      if (stan::math::logical_eq(est_cv, 1)) {
        current_statement__ = 30;
        stan::model::assign(gammaA,
          stan::math::inv(
            stan::math::pow(
              stan::model::rvalue(cv_gamma, "cv_gamma",
                stan::model::index_uni(1)), 2.0)),
          "assigning variable gammaA", stan::model::index_uni(1));
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "gammaA", gammaA, 0);
      {
        current_statement__ = 133;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(beta, 3, 0, 2));
        current_statement__ = 140;
        if (stan::math::logical_eq(time_varying, 1)) {
          current_statement__ = 134;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_rw, 3, 0,
                           1));
          current_statement__ = 135;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                           stan::model::rvalue(est_time_dev, "est_time_dev",
                             stan::model::index_uni(1)), 3, 0, 2));
          current_statement__ = 138;
          for (int i = 2; i <= (n_year - 1); ++i) {
            current_statement__ = 136;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(est_time_dev,
                               "est_time_dev", stan::model::index_uni(i)),
                             stan::model::rvalue(est_time_dev,
                               "est_time_dev",
                               stan::model::index_uni((i - 1))),
                             stan::model::rvalue(sigma_rw, "sigma_rw",
                               stan::model::index_uni(1))));
          }
        }
        current_statement__ = 143;
        if (stan::math::logical_eq(est_theta, 1)) {
          current_statement__ = 141;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(theta, 1, 1));
        }
        current_statement__ = 212;
        if (stan::math::logical_eq(family, 1)) {
          current_statement__ = 210;
          lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(yint,
                           log_lambda));
        } else {
          current_statement__ = 209;
          if (stan::math::logical_eq(family, 2)) {
            current_statement__ = 206;
            lp_accum__.add(stan::math::student_t_lpdf<propto__>(nb2_phi, 3,
                             0, 2));
            current_statement__ = 207;
            lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<propto__>(
                             yint, log_lambda,
                             stan::model::rvalue(nb2_phi, "nb2_phi",
                               stan::model::index_uni(1))));
          } else {
            current_statement__ = 205;
            if (stan::math::logical_eq(family, 3)) {
              current_statement__ = 203;
              for (int i = 1; i <= n_row; ++i) {
                current_statement__ = 201;
                if (stan::math::logical_eq(
                      stan::model::rvalue(yint, "yint",
                        stan::model::index_uni(i)), 0)) {
                  current_statement__ = 200;
                  lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(1,
                                   theta));
                } else {
                  current_statement__ = 196;
                  lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(0,
                                   theta));
                  current_statement__ = 197;
                  lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                                   stan::model::rvalue(yint, "yint",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(lambda, "lambda",
                                     stan::model::index_uni(i))));
                  current_statement__ = 198;
                  if (stan::math::logical_lt(
                        stan::model::rvalue(yint, "yint",
                          stan::model::index_uni(i)), 1)) {
                    current_statement__ = 198;
                    lp_accum__.add(stan::math::negative_infinity());
                  } else {
                    current_statement__ = 198;
                    lp_accum__.add(-stan::math::poisson_lccdf((1 - 1),
                                      stan::model::rvalue(lambda, "lambda",
                                        stan::model::index_uni(i))));
                  }
                }
              }
            } else {
              current_statement__ = 195;
              if (stan::math::logical_eq(family, 4)) {
                current_statement__ = 193;
                for (int i = 1; i <= n_row; ++i) {
                  current_statement__ = 191;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(yint, "yint",
                          stan::model::index_uni(i)), 0)) {
                    current_statement__ = 190;
                    lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(1,
                                     theta));
                  } else {
                    current_statement__ = 186;
                    lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(0,
                                     theta));
                    current_statement__ = 187;
                    lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(
                                     stan::model::rvalue(yint, "yint",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(lambda, "lambda",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(nb2_phi, "nb2_phi",
                                       stan::model::index_uni(1))));
                    current_statement__ = 188;
                    if (stan::math::logical_lt(
                          stan::model::rvalue(yint, "yint",
                            stan::model::index_uni(i)), 1)) {
                      current_statement__ = 188;
                      lp_accum__.add(stan::math::negative_infinity());
                    } else {
                      current_statement__ = 188;
                      lp_accum__.add(-stan::math::neg_binomial_2_lccdf((1 -
                                        1),
                                        stan::model::rvalue(lambda, "lambda",
                                          stan::model::index_uni(i)),
                                        stan::model::rvalue(nb2_phi,
                                          "nb2_phi",
                                          stan::model::index_uni(1))));
                    }
                  }
                }
              } else {
                current_statement__ = 185;
                if (stan::math::logical_eq(family, 5)) {
                  current_statement__ = 182;
                  lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                   sigma_logn, 3, 0, 2));
                  current_statement__ = 183;
                  lp_accum__.add(stan::math::lognormal_lpdf<propto__>(yreal,
                                   log_lambda,
                                   stan::model::rvalue(sigma_logn,
                                     "sigma_logn", stan::model::index_uni(1))));
                } else {
                  current_statement__ = 181;
                  if (stan::math::logical_eq(family, 6)) {
                    current_statement__ = 178;
                    lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                     stan::model::rvalue(cv_gamma,
                                       "cv_gamma", stan::model::index_uni(1)),
                                     3, 0, 2));
                    current_statement__ = 179;
                    lp_accum__.add(stan::math::gamma_lpdf<propto__>(yreal,
                                     stan::model::rvalue(gammaA, "gammaA",
                                       stan::model::index_uni(1)),
                                     stan::math::elt_divide(
                                       stan::model::rvalue(gammaA, "gammaA",
                                         stan::model::index_uni(1)), lambda)));
                  } else {
                    current_statement__ = 177;
                    if (stan::math::logical_eq(family, 7)) {
                      current_statement__ = 168;
                      lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                       sigma_logn, 3, 0, 2));
                      current_statement__ = 175;
                      for (int i = 1; i <= n_row; ++i) {
                        current_statement__ = 173;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(yint, "yint",
                                stan::model::index_uni(i)), 0)) {
                          current_statement__ = 172;
                          lp_accum__.add(stan::math::bernoulli_lpmf<
                                           propto__>(1, theta));
                        } else {
                          current_statement__ = 169;
                          lp_accum__.add(stan::math::bernoulli_lpmf<
                                           propto__>(0, theta));
                          current_statement__ = 170;
                          lp_accum__.add(stan::math::lognormal_lpdf<
                                           propto__>(
                                           stan::model::rvalue(yreal,
                                             "yreal",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(log_lambda,
                                             "log_lambda",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(sigma_logn,
                                             "sigma_logn",
                                             stan::model::index_uni(1))));
                        }
                      }
                    } else {
                      current_statement__ = 167;
                      if (stan::math::logical_eq(family, 8)) {
                        current_statement__ = 158;
                        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                         stan::model::rvalue(cv_gamma,
                                           "cv_gamma",
                                           stan::model::index_uni(1)), 3, 0,
                                         2));
                        current_statement__ = 165;
                        for (int i = 1; i <= n_row; ++i) {
                          current_statement__ = 163;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(yint, "yint",
                                  stan::model::index_uni(i)), 0)) {
                            current_statement__ = 162;
                            lp_accum__.add(stan::math::bernoulli_lpmf<
                                             propto__>(1, theta));
                          } else {
                            current_statement__ = 159;
                            lp_accum__.add(stan::math::bernoulli_lpmf<
                                             propto__>(0, theta));
                            current_statement__ = 160;
                            lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                                             stan::model::rvalue(yreal,
                                               "yreal",
                                               stan::model::index_uni(i)),
                                             stan::model::rvalue(gammaA,
                                               "gammaA",
                                               stan::model::index_uni(1)),
                                             (stan::model::rvalue(gammaA,
                                                "gammaA",
                                                stan::model::index_uni(1)) /
                                             stan::model::rvalue(lambda,
                                               "lambda",
                                               stan::model::index_uni(i)))));
                          }
                        }
                      } else {
                        current_statement__ = 157;
                        if (stan::math::logical_eq(family, 9)) {
                          current_statement__ = 154;
                          lp_accum__.add(stan::math::student_t_lpdf<
                                           propto__>(sigma_logn, 3, 0, 2));
                          current_statement__ = 155;
                          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                                           yreal, lambda,
                                           stan::model::rvalue(sigma_logn,
                                             "sigma_logn",
                                             stan::model::index_uni(1))));
                        } else {
                          current_statement__ = 153;
                          if (stan::math::logical_eq(family, 10)) {
                            current_statement__ = 144;
                            lp_accum__.add(stan::math::student_t_lpdf<
                                             propto__>(sigma_logn, 3, 0, 2));
                            current_statement__ = 151;
                            for (int i = 1; i <= n_row; ++i) {
                              current_statement__ = 149;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(yint, "yint",
                                      stan::model::index_uni(i)), 0)) {
                                current_statement__ = 148;
                                lp_accum__.add(stan::math::bernoulli_lpmf<
                                                 propto__>(1, theta));
                              } else {
                                current_statement__ = 145;
                                lp_accum__.add(stan::math::bernoulli_lpmf<
                                                 propto__>(0, theta));
                                current_statement__ = 146;
                                lp_accum__.add(stan::math::normal_lpdf<
                                                 propto__>(
                                                 stan::model::rvalue(yreal,
                                                   "yreal",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(lambda,
                                                   "lambda",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   sigma_logn, "sigma_logn",
                                                   stan::model::index_uni(1))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_bycatch_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> est_time_dev =
        Eigen::Matrix<double,-1,1>::Constant(est_time_dev_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      est_time_dev = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(est_time_dev_1dim__);
      std::vector<double> sigma_rw =
        std::vector<double>(time_varying,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma_rw = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   time_varying);
      std::vector<double> sigma_logn =
        std::vector<double>(est_sigma,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma_logn = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     est_sigma);
      std::vector<double> cv_gamma =
        std::vector<double>(est_cv, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      cv_gamma = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   est_cv);
      std::vector<double> nb2_phi =
        std::vector<double>(est_phi,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      nb2_phi = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  est_phi);
      std::vector<double> theta =
        std::vector<double>(est_theta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      theta = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, est_theta);
      Eigen::Matrix<double,-1,1> log_lambda =
        Eigen::Matrix<double,-1,1>::Constant(n_row,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(n_row,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> pred =
        Eigen::Matrix<double,-1,1>::Constant(n_row,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> gammaA =
        std::vector<double>(est_cv, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> time_dev =
        Eigen::Matrix<double,-1,1>::Constant(time_dev_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta);
      out__.write(est_time_dev);
      out__.write(sigma_rw);
      out__.write(sigma_logn);
      out__.write(cv_gamma);
      out__.write(nb2_phi);
      out__.write(theta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 16;
      stan::model::assign(pred, stan::math::multiply(x, beta),
        "assigning variable pred");
      current_statement__ = 22;
      if (stan::math::logical_eq(time_varying, 1)) {
        current_statement__ = 17;
        stan::model::assign(time_dev, 0, "assigning variable time_dev",
          stan::model::index_uni(1));
        current_statement__ = 20;
        for (int i = 2; i <= n_year; ++i) {
          current_statement__ = 18;
          stan::model::assign(time_dev,
            stan::model::rvalue(est_time_dev, "est_time_dev",
              stan::model::index_uni((i - 1))),
            "assigning variable time_dev", stan::model::index_uni(i));
        }
      }
      current_statement__ = 29;
      for (int i = 1; i <= n_row; ++i) {
        current_statement__ = 25;
        if (stan::math::logical_eq(time_varying, 1)) {
          current_statement__ = 23;
          stan::model::assign(pred,
            (stan::model::rvalue(pred, "pred", stan::model::index_uni(i)) +
            (time_varying *
            stan::model::rvalue(time_dev, "time_dev",
              stan::model::index_uni(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)))))),
            "assigning variable pred", stan::model::index_uni(i));
        }
        current_statement__ = 26;
        stan::model::assign(log_lambda,
          (stan::model::rvalue(pred, "pred", stan::model::index_uni(i)) +
          stan::math::log(
            stan::model::rvalue(effort, "effort", stan::model::index_uni(i)))),
          "assigning variable log_lambda", stan::model::index_uni(i));
        current_statement__ = 27;
        stan::model::assign(lambda,
          stan::math::exp(
            stan::model::rvalue(log_lambda, "log_lambda",
              stan::model::index_uni(i))), "assigning variable lambda",
          stan::model::index_uni(i));
      }
      current_statement__ = 31;
      if (stan::math::logical_eq(est_cv, 1)) {
        current_statement__ = 30;
        stan::model::assign(gammaA,
          stan::math::inv(
            stan::math::pow(
              stan::model::rvalue(cv_gamma, "cv_gamma",
                stan::model::index_uni(1)), 2.0)),
          "assigning variable gammaA", stan::model::index_uni(1));
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "gammaA", gammaA, 0);
      if (emit_transformed_parameters__) {
        out__.write(log_lambda);
        out__.write(lambda);
        out__.write(pred);
        out__.write(gammaA);
        out__.write(time_dev);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n_row,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<int> y_new =
        std::vector<int>(y_new_1dim__, std::numeric_limits<int>::min());
      Eigen::Matrix<double,-1,1> y_new_real =
        Eigen::Matrix<double,-1,1>::Constant(y_new_real_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 132;
      if (stan::math::logical_eq(family, 1)) {
        current_statement__ = 130;
        for (int n = 1; n <= n_row; ++n) {
          current_statement__ = 125;
          stan::model::assign(log_lik,
            stan::math::poisson_log_lpmf<false>(
              stan::model::rvalue(yint, "yint", stan::model::index_uni(n)),
              stan::model::rvalue(log_lambda, "log_lambda",
                stan::model::index_uni(n))), "assigning variable log_lik",
            stan::model::index_uni(n));
          current_statement__ = 126;
          stan::model::assign(y_new, 0, "assigning variable y_new",
            stan::model::index_uni(n));
          current_statement__ = 128;
          if (stan::math::logical_gt(
                stan::model::rvalue(new_effort, "new_effort",
                  stan::model::index_uni(n)), 0)) {
            current_statement__ = 127;
            stan::model::assign(y_new,
              stan::math::poisson_log_rng(
                (stan::model::rvalue(pred, "pred", stan::model::index_uni(n))
                +
                stan::math::log(
                  stan::model::rvalue(new_effort, "new_effort",
                    stan::model::index_uni(n)))), base_rng__),
              "assigning variable y_new", stan::model::index_uni(n));
          }
        }
      } else {
        current_statement__ = 124;
        if (stan::math::logical_eq(family, 2)) {
          current_statement__ = 122;
          for (int n = 1; n <= n_row; ++n) {
            current_statement__ = 117;
            stan::model::assign(log_lik,
              stan::math::neg_binomial_2_log_lpmf<false>(
                stan::model::rvalue(yint, "yint", stan::model::index_uni(n)),
                stan::model::rvalue(log_lambda, "log_lambda",
                  stan::model::index_uni(n)),
                stan::model::rvalue(nb2_phi, "nb2_phi",
                  stan::model::index_uni(1))), "assigning variable log_lik",
              stan::model::index_uni(n));
            current_statement__ = 118;
            stan::model::assign(y_new, 0, "assigning variable y_new",
              stan::model::index_uni(n));
            current_statement__ = 120;
            if (stan::math::logical_gt(
                  stan::model::rvalue(new_effort, "new_effort",
                    stan::model::index_uni(n)), 0)) {
              current_statement__ = 119;
              stan::model::assign(y_new,
                stan::math::neg_binomial_2_log_rng(
                  (stan::model::rvalue(pred, "pred",
                     stan::model::index_uni(n)) +
                  stan::math::log(
                    stan::model::rvalue(new_effort, "new_effort",
                      stan::model::index_uni(n)))),
                  stan::model::rvalue(nb2_phi, "nb2_phi",
                    stan::model::index_uni(1)), base_rng__),
                "assigning variable y_new", stan::model::index_uni(n));
            }
          }
        } else {
          current_statement__ = 116;
          if (stan::math::logical_eq(family, 3)) {
            current_statement__ = 114;
            for (int n = 1; n <= n_row; ++n) {
              current_statement__ = 109;
              if (stan::math::logical_eq(
                    stan::model::rvalue(yint, "yint",
                      stan::model::index_uni(n)), 0)) {
                current_statement__ = 107;
                stan::model::assign(log_lik,
                  stan::math::log(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(1))),
                  "assigning variable log_lik", stan::model::index_uni(n));
              } else {
                current_statement__ = 105;
                stan::model::assign(log_lik,
                  ((stan::math::log1m(
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(1))) +
                  stan::math::poisson_log_lpmf<false>(
                    stan::model::rvalue(yint, "yint",
                      stan::model::index_uni(n)),
                    stan::model::rvalue(log_lambda, "log_lambda",
                      stan::model::index_uni(n)))) -
                  stan::math::poisson_lccdf(0,
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(n)))),
                  "assigning variable log_lik", stan::model::index_uni(n));
              }
              current_statement__ = 110;
              stan::model::assign(y_new, 0, "assigning variable y_new",
                stan::model::index_uni(n));
              current_statement__ = 112;
              if (stan::math::logical_gt(
                    stan::model::rvalue(new_effort, "new_effort",
                      stan::model::index_uni(n)), 0)) {
                current_statement__ = 111;
                stan::model::assign(y_new, ((1 -
                  stan::math::bernoulli_rng(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(1)), base_rng__)) *
                  stan::math::poisson_log_rng(
                    (stan::model::rvalue(pred, "pred",
                       stan::model::index_uni(n)) +
                    stan::math::log(
                      stan::model::rvalue(new_effort, "new_effort",
                        stan::model::index_uni(n)))), base_rng__)),
                  "assigning variable y_new", stan::model::index_uni(n));
              }
            }
          } else {
            current_statement__ = 104;
            if (stan::math::logical_eq(family, 4)) {
              current_statement__ = 102;
              for (int n = 1; n <= n_row; ++n) {
                current_statement__ = 97;
                if (stan::math::logical_eq(
                      stan::model::rvalue(yint, "yint",
                        stan::model::index_uni(n)), 0)) {
                  current_statement__ = 95;
                  stan::model::assign(log_lik,
                    stan::math::log(
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(1))),
                    "assigning variable log_lik", stan::model::index_uni(n));
                } else {
                  current_statement__ = 93;
                  stan::model::assign(log_lik,
                    ((stan::math::log1m(
                        stan::model::rvalue(theta, "theta",
                          stan::model::index_uni(1))) +
                    stan::math::neg_binomial_2_log_lpmf<false>(
                      stan::model::rvalue(yint, "yint",
                        stan::model::index_uni(n)),
                      stan::model::rvalue(log_lambda, "log_lambda",
                        stan::model::index_uni(n)),
                      stan::model::rvalue(nb2_phi, "nb2_phi",
                        stan::model::index_uni(1)))) -
                    stan::math::neg_binomial_2_lccdf(0,
                      stan::model::rvalue(lambda, "lambda",
                        stan::model::index_uni(n)),
                      stan::model::rvalue(nb2_phi, "nb2_phi",
                        stan::model::index_uni(1)))),
                    "assigning variable log_lik", stan::model::index_uni(n));
                }
                current_statement__ = 98;
                stan::model::assign(y_new, 0, "assigning variable y_new",
                  stan::model::index_uni(n));
                current_statement__ = 100;
                if (stan::math::logical_gt(
                      stan::model::rvalue(new_effort, "new_effort",
                        stan::model::index_uni(n)), 0)) {
                  current_statement__ = 99;
                  stan::model::assign(y_new, ((1 -
                    stan::math::bernoulli_rng(
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(1)), base_rng__)) *
                    stan::math::neg_binomial_2_log_rng(
                      (stan::model::rvalue(pred, "pred",
                         stan::model::index_uni(n)) +
                      stan::math::log(
                        stan::model::rvalue(new_effort, "new_effort",
                          stan::model::index_uni(n)))),
                      stan::model::rvalue(nb2_phi, "nb2_phi",
                        stan::model::index_uni(1)), base_rng__)),
                    "assigning variable y_new", stan::model::index_uni(n));
                }
              }
            } else {
              current_statement__ = 92;
              if (stan::math::logical_eq(family, 5)) {
                current_statement__ = 90;
                for (int n = 1; n <= n_row; ++n) {
                  current_statement__ = 85;
                  stan::model::assign(log_lik,
                    stan::math::lognormal_lpdf<false>(
                      stan::model::rvalue(yreal, "yreal",
                        stan::model::index_uni(n)),
                      stan::model::rvalue(log_lambda, "log_lambda",
                        stan::model::index_uni(n)),
                      stan::model::rvalue(sigma_logn, "sigma_logn",
                        stan::model::index_uni(1))),
                    "assigning variable log_lik", stan::model::index_uni(n));
                  current_statement__ = 86;
                  stan::model::assign(y_new_real, 0,
                    "assigning variable y_new_real",
                    stan::model::index_uni(n));
                  current_statement__ = 88;
                  if (stan::math::logical_gt(
                        stan::model::rvalue(new_effort, "new_effort",
                          stan::model::index_uni(n)), 0)) {
                    current_statement__ = 87;
                    stan::model::assign(y_new_real,
                      stan::math::lognormal_rng(
                        (stan::model::rvalue(pred, "pred",
                           stan::model::index_uni(n)) +
                        stan::math::log(
                          stan::model::rvalue(new_effort, "new_effort",
                            stan::model::index_uni(n)))),
                        stan::model::rvalue(sigma_logn, "sigma_logn",
                          stan::model::index_uni(1)), base_rng__),
                      "assigning variable y_new_real",
                      stan::model::index_uni(n));
                  }
                }
              } else {
                current_statement__ = 84;
                if (stan::math::logical_eq(family, 6)) {
                  current_statement__ = 82;
                  for (int n = 1; n <= n_row; ++n) {
                    current_statement__ = 77;
                    stan::model::assign(log_lik,
                      stan::math::gamma_lpdf<false>(
                        stan::model::rvalue(yreal, "yreal",
                          stan::model::index_uni(n)),
                        stan::model::rvalue(gammaA, "gammaA",
                          stan::model::index_uni(1)),
                        (stan::model::rvalue(gammaA, "gammaA",
                           stan::model::index_uni(1)) /
                        stan::model::rvalue(lambda, "lambda",
                          stan::model::index_uni(n)))),
                      "assigning variable log_lik", stan::model::index_uni(n));
                    current_statement__ = 78;
                    stan::model::assign(y_new_real, 0,
                      "assigning variable y_new_real",
                      stan::model::index_uni(n));
                    current_statement__ = 80;
                    if (stan::math::logical_gt(
                          stan::model::rvalue(new_effort, "new_effort",
                            stan::model::index_uni(n)), 0)) {
                      current_statement__ = 79;
                      stan::model::assign(y_new_real,
                        stan::math::gamma_rng(
                          stan::model::rvalue(gammaA, "gammaA",
                            stan::model::index_uni(1)),
                          (stan::model::rvalue(gammaA, "gammaA",
                             stan::model::index_uni(1)) /
                          stan::math::exp(
                            (stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(n)) +
                            stan::math::log(
                              stan::model::rvalue(new_effort, "new_effort",
                                stan::model::index_uni(n)))))), base_rng__),
                        "assigning variable y_new_real",
                        stan::model::index_uni(n));
                    }
                  }
                } else {
                  current_statement__ = 76;
                  if (stan::math::logical_eq(family, 7)) {
                    current_statement__ = 74;
                    for (int n = 1; n <= n_row; ++n) {
                      current_statement__ = 69;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(yint, "yint",
                              stan::model::index_uni(n)), 0)) {
                        current_statement__ = 67;
                        stan::model::assign(log_lik,
                          stan::math::log(
                            stan::model::rvalue(theta, "theta",
                              stan::model::index_uni(1))),
                          "assigning variable log_lik",
                          stan::model::index_uni(n));
                      } else {
                        current_statement__ = 65;
                        stan::model::assign(log_lik,
                          stan::math::lognormal_lpdf<false>(
                            stan::model::rvalue(yreal, "yreal",
                              stan::model::index_uni(n)),
                            stan::model::rvalue(log_lambda, "log_lambda",
                              stan::model::index_uni(n)),
                            stan::model::rvalue(sigma_logn, "sigma_logn",
                              stan::model::index_uni(1))),
                          "assigning variable log_lik",
                          stan::model::index_uni(n));
                      }
                      current_statement__ = 70;
                      stan::model::assign(y_new_real, 0,
                        "assigning variable y_new_real",
                        stan::model::index_uni(n));
                      current_statement__ = 72;
                      if (stan::math::logical_gt(
                            stan::model::rvalue(new_effort, "new_effort",
                              stan::model::index_uni(n)), 0)) {
                        current_statement__ = 71;
                        stan::model::assign(y_new_real, ((1 -
                          stan::math::bernoulli_rng(
                            stan::model::rvalue(theta, "theta",
                              stan::model::index_uni(1)), base_rng__)) *
                          stan::math::lognormal_rng(
                            (stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(n)) +
                            stan::math::log(
                              stan::model::rvalue(new_effort, "new_effort",
                                stan::model::index_uni(n)))),
                            stan::model::rvalue(sigma_logn, "sigma_logn",
                              stan::model::index_uni(1)), base_rng__)),
                          "assigning variable y_new_real",
                          stan::model::index_uni(n));
                      }
                    }
                  } else {
                    current_statement__ = 64;
                    if (stan::math::logical_eq(family, 8)) {
                      current_statement__ = 62;
                      for (int n = 1; n <= n_row; ++n) {
                        current_statement__ = 56;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(yint, "yint",
                                stan::model::index_uni(n)), 0)) {
                          current_statement__ = 54;
                          stan::model::assign(log_lik,
                            stan::math::log(
                              stan::model::rvalue(theta, "theta",
                                stan::model::index_uni(1))),
                            "assigning variable log_lik",
                            stan::model::index_uni(n));
                        } else {
                          current_statement__ = 52;
                          stan::model::assign(log_lik,
                            stan::math::gamma_lpdf<false>(
                              stan::model::rvalue(yreal, "yreal",
                                stan::model::index_uni(n)),
                              stan::model::rvalue(gammaA, "gammaA",
                                stan::model::index_uni(1)),
                              (stan::model::rvalue(gammaA, "gammaA",
                                 stan::model::index_uni(1)) /
                              stan::model::rvalue(lambda, "lambda",
                                stan::model::index_uni(n)))),
                            "assigning variable log_lik",
                            stan::model::index_uni(n));
                        }
                        current_statement__ = 57;
                        stan::model::assign(y_new_real, 0,
                          "assigning variable y_new_real",
                          stan::model::index_uni(n));
                        current_statement__ = 59;
                        if (stan::math::logical_gt(
                              stan::model::rvalue(new_effort, "new_effort",
                                stan::model::index_uni(n)), 0)) {
                          current_statement__ = 58;
                          stan::model::assign(y_new_real, ((1 -
                            stan::math::bernoulli_rng(
                              stan::model::rvalue(theta, "theta",
                                stan::model::index_uni(1)), base_rng__)) *
                            stan::math::gamma_rng(
                              stan::model::rvalue(gammaA, "gammaA",
                                stan::model::index_uni(1)),
                              (stan::model::rvalue(gammaA, "gammaA",
                                 stan::model::index_uni(1)) /
                              stan::math::exp(
                                (stan::model::rvalue(pred, "pred",
                                   stan::model::index_uni(n)) +
                                stan::math::log(
                                  stan::model::rvalue(new_effort,
                                    "new_effort", stan::model::index_uni(n)))))),
                              base_rng__)), "assigning variable y_new_real",
                            stan::model::index_uni(n));
                        }
                        ;
                      }
                    } else {
                      current_statement__ = 51;
                      if (stan::math::logical_eq(family, 9)) {
                        current_statement__ = 49;
                        for (int n = 1; n <= n_row; ++n) {
                          current_statement__ = 44;
                          stan::model::assign(log_lik,
                            stan::math::normal_lpdf<false>(
                              stan::model::rvalue(yreal, "yreal",
                                stan::model::index_uni(n)),
                              stan::model::rvalue(lambda, "lambda",
                                stan::model::index_uni(n)),
                              stan::model::rvalue(sigma_logn, "sigma_logn",
                                stan::model::index_uni(1))),
                            "assigning variable log_lik",
                            stan::model::index_uni(n));
                          current_statement__ = 45;
                          stan::model::assign(y_new_real, 0,
                            "assigning variable y_new_real",
                            stan::model::index_uni(n));
                          current_statement__ = 47;
                          if (stan::math::logical_gt(
                                stan::model::rvalue(new_effort, "new_effort",
                                  stan::model::index_uni(n)), 0)) {
                            current_statement__ = 46;
                            stan::model::assign(y_new_real,
                              stan::math::normal_rng(
                                stan::math::exp(
                                  (stan::model::rvalue(pred, "pred",
                                     stan::model::index_uni(n)) +
                                  stan::math::log(
                                    stan::model::rvalue(new_effort,
                                      "new_effort", stan::model::index_uni(n))))),
                                stan::model::rvalue(sigma_logn, "sigma_logn",
                                  stan::model::index_uni(1)), base_rng__),
                              "assigning variable y_new_real",
                              stan::model::index_uni(n));
                          }
                        }
                      } else {
                        current_statement__ = 43;
                        if (stan::math::logical_eq(family, 10)) {
                          current_statement__ = 41;
                          for (int n = 1; n <= n_row; ++n) {
                            current_statement__ = 36;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(yint, "yint",
                                    stan::model::index_uni(n)), 0)) {
                              current_statement__ = 34;
                              stan::model::assign(log_lik,
                                stan::math::log(
                                  stan::model::rvalue(theta, "theta",
                                    stan::model::index_uni(1))),
                                "assigning variable log_lik",
                                stan::model::index_uni(n));
                            } else {
                              current_statement__ = 32;
                              stan::model::assign(log_lik,
                                stan::math::normal_lpdf<false>(
                                  stan::model::rvalue(yreal, "yreal",
                                    stan::model::index_uni(n)),
                                  stan::model::rvalue(lambda, "lambda",
                                    stan::model::index_uni(n)),
                                  stan::model::rvalue(sigma_logn,
                                    "sigma_logn", stan::model::index_uni(1))),
                                "assigning variable log_lik",
                                stan::model::index_uni(n));
                            }
                            current_statement__ = 37;
                            stan::model::assign(y_new_real, 0,
                              "assigning variable y_new_real",
                              stan::model::index_uni(n));
                            current_statement__ = 39;
                            if (stan::math::logical_gt(
                                  stan::model::rvalue(new_effort,
                                    "new_effort", stan::model::index_uni(n)),
                                  0)) {
                              current_statement__ = 38;
                              stan::model::assign(y_new_real, ((1 -
                                stan::math::bernoulli_rng(
                                  stan::model::rvalue(theta, "theta",
                                    stan::model::index_uni(1)), base_rng__))
                                *
                                stan::math::normal_rng(
                                  stan::math::exp(
                                    (stan::model::rvalue(pred, "pred",
                                       stan::model::index_uni(n)) +
                                    stan::math::log(
                                      stan::model::rvalue(new_effort,
                                        "new_effort",
                                        stan::model::index_uni(n))))),
                                  stan::model::rvalue(sigma_logn,
                                    "sigma_logn", stan::model::index_uni(1)),
                                  base_rng__)),
                                "assigning variable y_new_real",
                                stan::model::index_uni(n));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "y_new", y_new, 0);
      out__.write(log_lik);
      out__.write(y_new);
      out__.write(y_new_real);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> est_time_dev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_time_dev_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(est_time_dev,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(est_time_dev_1dim__),
        "assigning variable est_time_dev");
      out__.write(est_time_dev);
      std::vector<local_scalar_t__> sigma_rw =
        std::vector<local_scalar_t__>(time_varying, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(sigma_rw,
        in__.read<std::vector<local_scalar_t__>>(time_varying),
        "assigning variable sigma_rw");
      out__.write_free_lb(0, sigma_rw);
      std::vector<local_scalar_t__> sigma_logn =
        std::vector<local_scalar_t__>(est_sigma, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sigma_logn,
        in__.read<std::vector<local_scalar_t__>>(est_sigma),
        "assigning variable sigma_logn");
      out__.write_free_lb(0, sigma_logn);
      std::vector<local_scalar_t__> cv_gamma =
        std::vector<local_scalar_t__>(est_cv, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(cv_gamma,
        in__.read<std::vector<local_scalar_t__>>(est_cv),
        "assigning variable cv_gamma");
      out__.write_free_lb(0, cv_gamma);
      std::vector<local_scalar_t__> nb2_phi =
        std::vector<local_scalar_t__>(est_phi, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(nb2_phi,
        in__.read<std::vector<local_scalar_t__>>(est_phi),
        "assigning variable nb2_phi");
      out__.write_free_lb(0, nb2_phi);
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(est_theta, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(theta,
        in__.read<std::vector<local_scalar_t__>>(est_theta),
        "assigning variable theta");
      out__.write_free_lub(0, 1, theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "est_time_dev",
        "double",
        std::vector<size_t>{static_cast<size_t>(est_time_dev_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma_rw",
        "double", std::vector<size_t>{static_cast<size_t>(time_varying)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_logn",
        "double", std::vector<size_t>{static_cast<size_t>(est_sigma)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "cv_gamma",
        "double", std::vector<size_t>{static_cast<size_t>(est_cv)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "nb2_phi",
        "double", std::vector<size_t>{static_cast<size_t>(est_phi)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{static_cast<size_t>(est_theta)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> est_time_dev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_time_dev_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> est_time_dev_flat__;
        current_statement__ = 2;
        est_time_dev_flat__ = context__.vals_r("est_time_dev");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= est_time_dev_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(est_time_dev, est_time_dev_flat__[(pos__ - 1)],
            "assigning variable est_time_dev", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(est_time_dev);
      std::vector<local_scalar_t__> sigma_rw =
        std::vector<local_scalar_t__>(time_varying, DUMMY_VAR__);
      current_statement__ = 3;
      sigma_rw = context__.vals_r("sigma_rw");
      out__.write_free_lb(0, sigma_rw);
      std::vector<local_scalar_t__> sigma_logn =
        std::vector<local_scalar_t__>(est_sigma, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_logn = context__.vals_r("sigma_logn");
      out__.write_free_lb(0, sigma_logn);
      std::vector<local_scalar_t__> cv_gamma =
        std::vector<local_scalar_t__>(est_cv, DUMMY_VAR__);
      current_statement__ = 5;
      cv_gamma = context__.vals_r("cv_gamma");
      out__.write_free_lb(0, cv_gamma);
      std::vector<local_scalar_t__> nb2_phi =
        std::vector<local_scalar_t__>(est_phi, DUMMY_VAR__);
      current_statement__ = 6;
      nb2_phi = context__.vals_r("nb2_phi");
      out__.write_free_lb(0, nb2_phi);
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(est_theta, DUMMY_VAR__);
      current_statement__ = 7;
      theta = context__.vals_r("theta");
      out__.write_free_lub(0, 1, theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "est_time_dev", "sigma_rw",
                "sigma_logn", "cv_gamma", "nb2_phi", "theta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"log_lambda", "lambda", "pred", "gammaA", "time_dev"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik", "y_new", "y_new_real"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(est_time_dev_1dim__)},
                std::vector<size_t>{static_cast<size_t>(time_varying)},
                std::vector<size_t>{static_cast<size_t>(est_sigma)},
                std::vector<size_t>{static_cast<size_t>(est_cv)},
                std::vector<size_t>{static_cast<size_t>(est_phi)},
                std::vector<size_t>{static_cast<size_t>(est_theta)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_row)},
             std::vector<size_t>{static_cast<size_t>(n_row)},
             std::vector<size_t>{static_cast<size_t>(n_row)},
             std::vector<size_t>{static_cast<size_t>(est_cv)},
             std::vector<size_t>{static_cast<size_t>(time_dev_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_row)},
             std::vector<size_t>{static_cast<size_t>(y_new_1dim__)},
             std::vector<size_t>{static_cast<size_t>(y_new_real_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_time_dev_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "est_time_dev" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= time_varying; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_rw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_logn" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_cv; ++sym1__) {
      param_names__.emplace_back(std::string() + "cv_gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_phi; ++sym1__) {
      param_names__.emplace_back(std::string() + "nb2_phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_theta; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= est_cv; ++sym1__) {
        param_names__.emplace_back(std::string() + "gammaA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= time_dev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "time_dev" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_new_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_new_real_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new_real" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_time_dev_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "est_time_dev" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= time_varying; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_rw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_logn" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_cv; ++sym1__) {
      param_names__.emplace_back(std::string() + "cv_gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_phi; ++sym1__) {
      param_names__.emplace_back(std::string() + "nb2_phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_theta; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= est_cv; ++sym1__) {
        param_names__.emplace_back(std::string() + "gammaA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= time_dev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "time_dev" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_row; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_new_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_new_real_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new_real" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"est_time_dev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(est_time_dev_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(time_varying) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_logn\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_sigma) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"cv_gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_cv) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nb2_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_phi) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_theta) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gammaA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_cv) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"time_dev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(time_dev_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_new\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_new_1dim__) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_new_real\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_new_real_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"est_time_dev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(est_time_dev_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(time_varying) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_logn\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_sigma) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"cv_gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_cv) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nb2_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_phi) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_theta) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gammaA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_cv) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"time_dev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(time_dev_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_row) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_new\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_new_1dim__) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_new_real\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_new_real_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((K + est_time_dev_1dim__) +
      time_varying) + est_sigma) + est_cv) + est_phi) + est_theta);
    const size_t num_transformed = emit_transformed_parameters * (((((n_row +
      n_row) + n_row) + est_cv) + time_dev_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (((n_row +
      y_new_1dim__) + y_new_real_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((K + est_time_dev_1dim__) +
      time_varying) + est_sigma) + est_cv) + est_phi) + est_theta);
    const size_t num_transformed = emit_transformed_parameters * (((((n_row +
      n_row) + n_row) + est_cv) + time_dev_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (((n_row +
      y_new_1dim__) + y_new_real_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_bycatch_namespace::model_bycatch;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bycatch_namespace::profiles__;
}
#endif
#endif
